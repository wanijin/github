
/*****************************************
    selectBox : select box plugin

    Stylish Select 0.4.1 - $ plugin to replace a select drop down box with a stylable unordered list
    http://github.com/sko77sun/Stylish-Select

    Requires: jQuery 1.3 or newer
    Contributions from Justin Beasley: http://www.harvest.org/ & Anatoly Ressin: http://www.artazor.lv/
    Dual licensed under the MIT and GPL licenses.

*****************************************/

/**
 * custom, add : wddo (Jo Yun Ki), ddoengnaver.com
 * comment : Thankyou to sko77sun
 * 
 * $(obj).sSelect({options});
 * 
 * public
 *  options
 *      defaultText     : default text
 *      listMaxHeight   : ul max height
 *      listWidth       : ul width
 *      isTop           : ul top align
 *      
 *      obj.setDisable(boolean) : disable selectbox
 *      obj.resetSS()           : change select apply
 *      obj.getSetSSValue(value): get value, return index
 *      obj.hasSelect(): return boolean or return element array
 *      obj.removeSS(): remove style selectbox
 **/

(function($){
    //add class to html tag
    $('html').addClass('stylish-select');
    
    function arrIndexOf(arr, obj, start) {
        for (var i = (start || 0); i < arr.length; i++) {
            if (arr[i] == obj) {
                return i;
            }
        }
    }

    //utility methods
    $.fn.extend({
        getSetSSValue: function(value){
            if (value){
                //set value and trigger change event
                $(this).val(value).change();
                return this;
            } else {
                return $(this).find(':selected').val();
            }
        },
        //added by Justin Beasley
        resetSS: function(){
            var oldOpts = $(this).data('ssOpts');
            $this = $(this);
            $this.css('display', '').next().remove();
            
            //unbind all events and redraw
            $this.unbind('.sSelect').sSelect(oldOpts);
        },
        //added by wddo
        setDisable: function(value) {
            if (typeof value === 'boolean') {
                var $input = $(this),
                    $containerDiv = $input.next(),
                    $containerDivText = $containerDiv.children().eq(0),
                    $newUl = $containerDiv.children().eq(1);
                    $newLi = $newUl.children();
                
                if (value) {
                    if ($input.attr('disabled') === undefined) $input.attr('disabled', 'disabled');
                    $containerDivText.addClass('disable');
                    $containerDiv[0].tabIndex = -1;
                } else {
                    if ($input.attr('disabled') !== undefined) $input.removeAttr('disabled');
                    $containerDivText.removeClass('disable');
                    $containerDiv[0].tabIndex = 0;
                }
            }
        },
        //added by zt 15.02.04
        hasSelect: function() {
        	$this = $(this);
        	var len = $this.length;
        	if(len > 1){
            	//해당 비교 클래스가 한개 이상이면 배열로 폼스타일 적용된 엘리먼트 리턴 
        		var hasSelect = [];
            	$this.each(function(i,e){
            		var isHasClass = $(this).next().hasClass("select-list-box");
            		if(isHasClass){
            			hasSelect.push(e);	
            		}
            	});
            	return hasSelect;
        	}else{
        		//해당 비교 클래스가 한개면 true, false로 리턴
        		var isHasClass = $this.next().hasClass("select-list-box");
        		return isHasClass;
        	}
        },
        //added by zt 15.02.08
        removeSS: function(){
            $this = $(this);
            $this.css('display', '').next().remove();
            $this.unbind('.sSelect');
        }
    });

    $.fn.sSelect = function(options) {

        return this.each(function(){

        var defaults = {
            defaultText: '', //custom 2013-06-13 wddo : default text change
            animationSpeed: 0, //set speed of dropdown
            listMaxHeight: '140px', //set css max-height value of dropdown //fix 140px custom 2012-10-10 wddo
            containerClass: '', //additional classes for container div
            containerStyle: '', //add 2012-09-27 wddo : copy style
            isTop: false //add 2013-06-13 wddo : public set UL list align top
        };

        //initial variables

        //초성 노출 확인
        var choStr = '<div class="select-onInquiry" style="visibility:hidden;/*pointer-events:none;*/"><ul>';
        var cho = ["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"];
        var cho2 = ["ㄱ","ㄴ","ㄷ","ㄹ","ㅁ","ㅂ","ㅅ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"];
        var choY = false;
        for(var i=0; i < cho2.length; i++){
        	choY=false;
        	$("#addrDoro").find("option").each(function(index){
         		var code = $(this).text().charCodeAt(0)-44032;
         		if(code>-1 && code<11172 && index > 0){
         			if(cho2[i] == cho[Math.floor(code/588)]){
         				choY = true;
         				return false;
         			}
         		}
            });
        	if(choY){
        		choStr += '<li><a href="#">'+cho2[i]+'</a></li>';
        	}else{
        		choStr += '<li><span>'+cho2[i]+'</span></li>';
        	}
        }
        choStr += '</ul></div>';
        var choDiv = $(choStr);
        
        
        var opts = $.extend(defaults, options),
        $input = $(this);
        if($input.attr('style') != undefined){opts.containerStyle = $input.attr('style');} //custom 2012-09-27 wddo : copy style 
        var $containerDivText = $('<div title="' + $input.attr('title') + '" class="form_spr selected-headline" style="' + opts.containerStyle + '"></div>'), //custom 2012-09-27 wddo : copy style
        $containerDiv = $('<div style="' + opts.containerStyle + '" class="select-list-box ' + opts.containerClass + '"></div>'), //custom 2012-09-27 wddo : copy style
        $newUl = $('<ul class="select-list" style="visibility:hidden;' + opts.containerStyle + '"></ul>'),
        $UiInfo ="<div title='SelectBox 키보드 이용 안내' style='position:absolute;top:-9999px;left:-9999px;width:1px;height:1px;overflow:hidden;'><h3>SelectBox 키보드 이용 안내</h3><dl><dt>Up, Down 키보드 이용</dt><dd>Select Box의 항목 중 이전, 다음 선택</dd><dt>Alt + Up &amp; Alt + Down 키보드 이용</dt><dd>Select Box 목록 활성화 및 항목 중 이전, 다음 선택</dd><dt>Home, PageUp 키보드 이용</dt><dd>Select Box 목록 중 처음으로 이동</dd><dt>End, PageDown 키보드 이용</dt><dd>Select Box 목록 중 마지막으로 이동</dd></dl></div>",
        $onInquiry = choDiv,
        itemIndex = -1,
        currentIndex = -1,
        keys = [],
        prevKey = false,
        prevented = false,
        $newLi;

        //console.log($(this));

        //added by Justin Beasley
        $(this).data('ssOpts',options);

        //build new list
        $containerDiv.insertAfter($input);
        $containerDiv.attr("tabindex", $input.attr("tabindex") || "0");
        //$containerDiv.css("width",opts.listWidth+"px");
        $containerDivText.prependTo($containerDiv);
        
        $containerDiv.prepend($UiInfo);
        
        if($(this).hasClass("onInquiry")){
            $onInquiry.appendTo($containerDiv);    
            //$onInquiry.closest(".select-list-box").addClass("inQuiry");
        }
        $newUl.appendTo($containerDiv);
        $input.hide();
        
        //wddo write layout :  select($input)
        //                      div($containerDiv)  - div($containerDivText)
        //                                          - ul($newUl) - li($newLi)

        //added by Justin Beasley (used for lists initialized while hidden)
        $containerDivText.data('ssReRender',!$containerDivText.is(':visible'));

            //test for optgroup
            if ($input.children('optgroup').length == 0){
                $input.children().each(function(i){
                    var option_title = "";
                    if(typeof $(this).attr("title") !=="undefined" && $(this).attr("title").length >0 ) {
                        option_title = $(this).attr("title");
                    } else {
                        option_title = $(this).html();
                    }
                    var option = $(this).html();
                    var trimmedOption;
                    
                    if (option.length > 40) {
                       trimmedOption = option.slice(0, 39) + '..';    
                    } else {
                       trimmedOption = option;
                    }
                    var key = $(this).val();

                    //add first letter of each word to array
                    keys.push(option.charAt(0).toLowerCase());
                    if ($(this).attr('selected') == true){
                        opts.defaultText = option;
                        currentIndex = i;
                    }
                    $newUl.append($('<li><a title="'+option_title+'" href="JavaScript:void(0);" class="select-list-link">'+trimmedOption+'</a></li>').data('key', key));

                });
                //cache list items object
                $newLi = $newUl.children().children();

            } else { //optgroup
                $input.children('optgroup').each(function(){

                    var optionTitle = $(this).attr('label'),
                    $optGroup = $('<li class="select-list-option-title">'+optionTitle+'</li>');

                    $optGroup.appendTo($newUl);

                    var $optGroupList = $('<ul></ul>');

                    $optGroupList.appendTo($optGroup);

                    $(this).children().each(function(){
                        ++itemIndex;
                        var option = $(this).html();
                        var key = $(this).val();
                        //add first letter of each word to array
                        keys.push(option.charAt(0).toLowerCase());
                        if ($(this).attr('selected') == true){
                            opts.defaultText = option;
                            currentIndex = itemIndex;did
                        }
                        $optGroupList.append($('<li><a href="JavaScript:void(0);">'+option+'</a></li>').data('key',key));
                    })
                });
                //cache list items object
                $newLi = $newUl.find('ul li a');
            }

            //get heights of new elements for use later
            var newUlHeight = $newUl.height(),
            containerHeight = $containerDiv.height(),
            newLiLength = $newLi.length;


            //custom 2012-10-25 wddo : default index 0 LI selected
            if (newLiLength != 0 && opts.defaultText === ''){
                //option tag, if selected attribute
                itemIndex = $input.find('> option').filter(':selected').index();
                                
                currentIndex = itemIndex;
            }

            //check if a value is selected
            if (currentIndex != -1){
                navigateList(currentIndex, true);
            } else {
                //set placeholder text
                $containerDivText.html('<span>' + opts.defaultText + '</span>');
            }

            //decide if to place the new list above or below the drop-down
            function newUlPos(){
                var containerPosY = $containerDiv.offset().top,
                docHeight = jQuery(window).height(),
                scrollTop = jQuery(window).scrollTop();
                
                //if height of list is greater then max height, set list height to max height value
                if (newUlHeight > parseInt(opts.listMaxHeight)) {
                    newUlHeight = parseInt(opts.listMaxHeight);
                }

                containerPosY = containerPosY-scrollTop;
                if (containerPosY+newUlHeight >= docHeight || opts.isTop){
                    $newUl.css({
                        top: '-'+newUlHeight-1+'px',
                        width : opts.listWidth-2+'px',
                        height: newUlHeight
                    });
                    $input.onTop = true;
                } else {
                    containerHeight = $containerDiv.height()
                    $newUl.css({
                        top: containerHeight-1+'px',
                        width : opts.listWidth-2+'px',
                        height: newUlHeight
                    });
                    
                    $input.onTop = false;
                }
            }

            //add 2012-11-13 wddo : if !ie outline none 
            if(typeof document.attachEvent === 'undefined'){
                $containerDiv.css('outline-style', 'none');
                $newLi.css('outline-style', 'none');
            }

            //run function on page load
            newUlPos();

            //run function on browser window resize
            $(window).bind('resize.sSelect scroll.sSelect', newUlPos);

            //positioning
            function positionFix(){
                //$containerDiv.css('position','relative');
            }

            function positionHideFix(){
                $containerDiv.css('position','static');
            }

            $containerDivText.bind('click.sSelect',function(event){
                
                if(getDisabled())return;
                event.stopPropagation();

                //added by Justin Beasley
                if($(this).data('ssReRender')) {
                    newUlHeight = $newUl.height('').height();
                    containerHeight = $containerDiv.height();
                    $(this).data('ssReRender',false);
                    newUlPos();
                }

                //hide all menus apart from this one
                $('.select-onInquiry').not($(this).next()).hide();
                //$('.select-list').not($(this).next()).hide()
                $('.select-list').not($(this).siblings(".select-list")).hide()
                    .parent()
                        .css('position', 'static');
                        //.removeClass('select-list-selfocus'); //custom 2012-10-18 wddo : ie7 list scrolling error

                //show/hide this menu
                /*
                console.log("UL : " , $newUl.css("display"));
                if($newUl.css("display") == "none"){
                    $newUl.show();
                }else{
                    $newUl.hide();
                }

                console.log("BOX : " , $onInquiry.css("display"));
                if($onInquiry.css("display") == "none"){
                    $onInquiry.show();
                }else{
                    $onInquiry.hide();
                }
                console.log($newUl.closest(".select-list-box").hasClass("inQuiry"));
                if($newUl.closest(".select-list-box").hasClass("inQuiry")){
                    $newUl.toggle();
                }else{
                    $newUl.toggle();
                }

                */

                $newUl.toggle();
                $onInquiry.toggle();
                positionFix();
                //scroll list to selected item
                $newLi.eq(currentIndex).focus();


            });

            $newLi.bind('click.sSelect',function(e){
                if(getDisabled())return;

                var $clickedLi = $(e.target);

                //update counter
                currentIndex = $newLi.index($clickedLi);

                //remove all hilites, then add hilite to selected item
                prevented = true;
                navigateList(currentIndex);
                $newUl.hide();
                $onInquiry.hide();
                $containerDiv.css('position','static');//ie
            });

            $newLi.bind('mouseenter.sSelect',
                function(e) {
                    var $hoveredLi = $(e.target);
                    $newLi.removeClass('select-list-selected'); //custom 2013-05-28 wddo : reset selected effect
                    $hoveredLi.addClass('select-list-hover');
                }
            ).bind('mouseleave.sSelect',
                function(e) {
                    var $hoveredLi = $(e.target);
                    $hoveredLi.removeClass('select-list-hover');
                }
            );

            function navigateList(currentIndex, init){
                $newLi.removeClass('select-list-hover'); //custom 2013-05-28 wddo : reset hover effect
                
                $newLi.removeClass('select-list-selected')
                .eq(currentIndex)
                .addClass('select-list-selected');

                if ($newUl.is(':visible')){
                    //$newLi.eq(currentIndex).focus(); //custom 2013-05-28 wddo : IE bug
                }

                var text = $newLi.eq(currentIndex).html();
                var val = $newLi.eq(currentIndex).parent().data('key');

                //add wddo 2013-03-25 // option if value 'http://' -> siblings A tag attribute href change
                if ($input.find('> option').eq(currentIndex).attr('value').slice(0, 7) === 'http://') {
                    $input.siblings('a').attr('href', $input.find('> option').eq(currentIndex).attr('value'));
                }

                //page load
                if (init == true){
                    $input.val(val);
                    $containerDivText.html('<span>' + text + '</span>');
                    return false;
                }

                try {
                    $input.val(val)
                } catch(ex) {
                    // handle ie6 exception
                    $input[0].selectedIndex = currentIndex;
                }
                                
                $input.change();
                $containerDivText.html('<span>' + text + '</span>');
            }

            $input.bind('change.sSelect',function(event){
                if(getDisabled())return;

                $targetInput = $(event.target);
                //stop change function from firing
                if (prevented == true){
                    prevented = false;
                    return false;
                }
                $currentOpt = $targetInput.find(':selected');

                currentIndex = $targetInput.find('option').index($currentOpt);

                navigateList(currentIndex, true);
            });

            //handle up and down keys
            function keyPress(element) {
                //when keys are pressed
                $(element).unbind('keydown.sSelect').bind('keydown.sSelect',function(e){
                    var keycode = e.which;

                    //prevent change function from firing
                    prevented = true;

                    switch(keycode) {
                        case 9: //tab
                            //add 2013-05-28 wddo : list close
                            $('.select-list').not($(this).next()).hide()
                                .parent()
                                    .css('position', 'static');
                            $onInquiry.hide();
                            break;
                        case 40: //down
                            //add 2013-05-28 wddo : keyborad open
                            if (e.altKey) {
                                $containerDivText.trigger('click');
                                break;
                            } 
                        case 39: //right
                            incrementList();
                            return false;
                            break;
                        case 38: //up
                            //add 2013-05-28 wddo : keyborad open                          
                            if (e.altKey) {
                                $containerDivText.trigger('click');
                                break;
                            }
                        case 37: //left
                            decrementList();
                            return false;
                            break;
                        case 33: //page up
                        case 36: //home
                            gotoFirst();
                            return false;
                            break;
                        case 34: //page down
                        case 35: //end
                            gotoLast();
                            return false;
                            break;
                        case 13:
                        case 27:
                            $newUl.hide();
                            $onInquiry.hide();
                            positionHideFix();
                            return false;
                            break;
                    }

                    //check for keyboard shortcuts
                    keyPressed = String.fromCharCode(keycode).toLowerCase();

                    //var currentKeyIndex = keys.indexOf(keyPressed);
                    var currentKeyIndex = arrIndexOf(keys, keyPressed);

                    if (typeof currentKeyIndex != 'undefined') { //if key code found in array
                        ++currentIndex;
                        //currentIndex = keys.indexOf(keyPressed, currentIndex); //search array from current index
                        //if (currentIndex == -1 || currentIndex == null || prevKey != keyPressed) currentIndex = keys.indexOf(keyPressed); //if no entry was found or new key pressed search from start of array
                        currentIndex = arrIndexOf(keys, keyPressed, currentIndex); //search array from current index
                        if (currentIndex == -1 || currentIndex == null || prevKey != keyPressed) currentIndex = arrIndexOf(keys, keyPressed); //if no entry was found or new key pressed search from start of array

                        navigateList(currentIndex);
                        //store last key pressed
                        prevKey = keyPressed;
                        return false;
                    }
                });
            }

            function incrementList(){
                if (currentIndex < (newLiLength-1)) {
                    ++currentIndex;
                    navigateList(currentIndex);
                    $newLi.eq(currentIndex).focus(); //add 2013-06-13 wddo : up&down keyboard to list scrollbar
                }
            }

            function decrementList(){
                if (currentIndex > 0) {
                    --currentIndex;
                    navigateList(currentIndex);
                    $newLi.eq(currentIndex).focus(); //add 2013-06-13 wddo : up&down keyboard to list scrollbar
                }
            }

            function gotoFirst(){
                currentIndex = 0;
                navigateList(currentIndex);
            }

            function gotoLast(){
                currentIndex = newLiLength-1;
                navigateList(currentIndex);
            }

            //add 2012-11-13 wddo
            function getDisabled(){
                var value = ($input.attr('disabled') !== undefined) ? true : false;

                return value;
            }
            
            $containerDiv.bind('click.sSelect',function(e){
                if(getDisabled())return;
                e.stopPropagation();
                keyPress(this);
            });

            $containerDiv.bind('focus.sSelect mouseover.sSelect',function(){ //custom 2013-03-12 wddo : xhtml by add mouseover
                if(getDisabled())return;
                if(typeof document.attachEvent === 'undefined')$containerDivText.addClass('select-list-selfocus'); //custom 2012-10-18 wddo : ie7 list scrolling error
                keyPress(this);
            });

            $containerDiv.bind('blur.sSelect mouseout.sSelect',function(){ //custom 2013-03-12 wddo : xhtml by add mouseout
                if(getDisabled())return;
                if(typeof document.attachEvent === 'undefined')$containerDivText.removeClass('select-list-selfocus'); //custom 2012-10-18 wddo : ie7 list scrolling error
            });

            //hide list on blur
            $(document).bind('click.sSelect',function(){
                if(typeof document.attachEvent === 'undefined')$containerDivText.removeClass('select-list-selfocus'); //custom 2012-10-18 wddo : ie7 list scrolling error
                $newUl.hide();
                $onInquiry.hide();
                positionHideFix();
            });

            //add classes on hover
            $containerDivText.bind('mouseenter.sSelect',
                function(e) {
                    var $hoveredTxt = $(e.target);
                    //$hoveredTxt.parent().addClass('select-list-selhover');
                }
            ).bind('mouseleave.sSelect',
                function(e) {
                    var $hoveredTxt = $(e.target);
                    //$hoveredTxt.parent().removeClass('select-list-selhover');
                }
            );

            //reset left property and hide
            $newUl.css({
                left: '0',
                display: 'none',
                visibility: 'visible'
            });

            $onInquiry.css({
                display: 'none',
                visibility: 'visible'
            });


            //add 2012-11-13 wddo : add disabled attribute 
            if (getDisabled()) {
                $input.setDisable(true);
            }
            onInquiryBefore();
        });
    };

    //초성 클릭시
    function onInquiryBefore(){
    	$('.select-list-box .select-onInquiry a').on("click",function(e){
            e.preventDefault();
            var selCho = $(this).text();
            var cho = ["ㄱ","ㄲ","ㄴ","ㄷ","ㄸ","ㄹ","ㅁ","ㅂ","ㅃ","ㅅ","ㅆ","ㅇ","ㅈ","ㅉ","ㅊ","ㅋ","ㅌ","ㅍ","ㅎ"];
            $("#addrDoro").next().find(".select-list li").each(function(index){
        		var code = $(this).text().charCodeAt(0)-44032;
        		if(code>-1 && code<11172 && index > 0){
        			if(selCho == cho[Math.floor(code/588)]){
        				
        				if($(this).next().next().html() != undefined){
        					$(this).next().next().find("a").focus();
        					$(this).next().next().find("a").blur()
        				}else{
        					$(this).find("a").focus();
        					$(this).find("a").blur()
        				}
        				return false;
        			}
        		}
            });
        });
    }
})(jQuery);
