/*
 *  2016.11.21 
 *  kia semantic.js 
 * 
 */

jQuery(function($){	
	csMovie.act();
});
var csMsg, csMovie = {
	act : function(){
		var youtubeUrl =  $.trim($(".csMovieUrl").text());
		var youtubeTxt =  $(".csMovieTxt").html();
		csMsg = "";
		csMsg = csMsg + "<div class='mov-count'>";
		csMsg = csMsg + "<iframe id='youtubeIframe' title='기아레드멤버스 멤버십 혜택 동영상' width='100%'' height='100%' src='https://www.youtube.com/embed/"+youtubeUrl+"?enablejsapi=1' frameborder='0' allowfullscreen=''></iframe>";
		csMsg = csMsg + "</div>";
		csMsg = csMsg + "<div class='videoTxt'>";
		csMsg = csMsg + "<a href='#' class='txt_hidden'>포커스 초점 받기</a>";
		csMsg = csMsg + youtubeTxt;
		csMsg = csMsg + "</div>";

		$(".csMovie").html(csMsg);
	}
}



/*
   Behaviour v1.1 by Ben Nolan, June 2005. Based largely on the work
   of Simon Willison (see comments by Simon below).

   Description:
   	
   	Uses css selectors to apply javascript behaviours to enable
   	unobtrusive javascript in html documents.
   	
   Usage:   
   
	var myrules = {
		'b.someclass' : function(element){
			element.onclick = function(){
				alert(this.innerHTML);
			}
		},
		'#someid u' : function(element){
			element.onmouseover = function(){
				this.innerHTML = "BLAH!";
			}
		}
	};
	
	Behaviour.register(myrules);
	
	// Call Behaviour.apply() to re-apply the rules (if you
	// update the dom, etc).

   License:
   
   	This file is entirely BSD licensed.
   	
   More information:
   	
   	http://ripcord.co.nz/behaviour/
   
*/   

var Behaviour = {
	list : new Array,
	
	register : function(sheet){
		Behaviour.list.push(sheet);
	},
	
	start : function(){
		Behaviour.addLoadEvent(function(){
			Behaviour.apply();
		});
	},
	
	apply : function(){
		for (h=0;sheet=Behaviour.list[h];h++){
			for (selector in sheet){
				list = document.getElementsBySelector(selector);
				
				if (!list){
					continue;
				}

				for (i=0;element=list[i];i++){
					sheet[selector](element);
				}
			}
		}
	},
	
	addLoadEvent : function(func){
		var oldonload = window.onload;
		
		if (typeof window.onload != 'function') {
			window.onload = func;
		} else {
			window.onload = function() {
				oldonload();
				func();
			}
		}
	}
}

Behaviour.start();

/*
   The following code is Copyright (C) Simon Willison 2004.

   document.getElementsBySelector(selector)
   - returns an array of element objects from the current document
     matching the CSS selector. Selectors can contain element names, 
     class names and ids and can be nested. For example:
     
       elements = document.getElementsBySelect('div#main p a.external')
     
     Will return an array of all 'a' elements with 'external' in their 
     class attribute that are contained inside 'p' elements that are 
     contained inside the 'div' element which has id="main"

   New in version 0.4: Support for CSS2 and CSS3 attribute selectors:
   See http://www.w3.org/TR/css3-selectors/#attribute-selectors

   Version 0.4 - Simon Willison, March 25th 2003
   -- Works in Phoenix 0.5, Mozilla 1.3, Opera 7, Internet Explorer 6, Internet Explorer 5 on Windows
   -- Opera 7 fails 
*/

function getAllChildren(e) {
  // Returns all children of element. Workaround required for IE5/Windows. Ugh.
  return e.all ? e.all : e.getElementsByTagName('*');
}

document.getElementsBySelector = function(selector) {
  // Attempt to fail gracefully in lesser browsers
  if (!document.getElementsByTagName) {
    return new Array();
  }
  // Split selector in to tokens
  var tokens = selector.split(' ');
  var currentContext = new Array(document);
  for (var i = 0; i < tokens.length; i++) {
    token = tokens[i].replace(/^\s+/,'').replace(/\s+$/,'');;
    if (token.indexOf('#') > -1) {
      // Token is an ID selector
      var bits = token.split('#');
      var tagName = bits[0];
      var id = bits[1];
      var element = document.getElementById(id);
      if (tagName && element.nodeName.toLowerCase() != tagName) {
        // tag with that ID not found, return false
        return new Array();
      }
      // Set currentContext to contain just this element
      currentContext = new Array(element);
      continue; // Skip to next token
    }
    if (token.indexOf('.') > -1) {
      // Token contains a class selector
      var bits = token.split('.');
      var tagName = bits[0];
      var className = bits[1];
      if (!tagName) {
        tagName = '*';
      }
      // Get elements matching tag, filter them for class selector
      var found = new Array;
      var foundCount = 0;
      for (var h = 0; h < currentContext.length; h++) {
        var elements;
        if (tagName == '*') {
            elements = getAllChildren(currentContext[h]);
        } else {
            elements = currentContext[h].getElementsByTagName(tagName);
        }
        for (var j = 0; j < elements.length; j++) {
          found[foundCount++] = elements[j];
        }
      }
      currentContext = new Array;
      var currentContextIndex = 0;
      for (var k = 0; k < found.length; k++) {
        if (found[k].className && found[k].className.match(new RegExp('\\b'+className+'\\b'))) {
          currentContext[currentContextIndex++] = found[k];
        }
      }
      continue; // Skip to next token
    }
    // Code to deal with attribute selectors
    if (token.match(/^(\w*)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/)) {
      var tagName = RegExp.$1;
      var attrName = RegExp.$2;
      var attrOperator = RegExp.$3;
      var attrValue = RegExp.$4;
      if (!tagName) {
        tagName = '*';
      }
      // Grab all of the tagName elements within current context
      var found = new Array;
      var foundCount = 0;
      for (var h = 0; h < currentContext.length; h++) {
        var elements;
        if (tagName == '*') {
            elements = getAllChildren(currentContext[h]);
        } else {
            elements = currentContext[h].getElementsByTagName(tagName);
        }
        for (var j = 0; j < elements.length; j++) {
          found[foundCount++] = elements[j];
        }
      }
      currentContext = new Array;
      var currentContextIndex = 0;
      var checkFunction; // This function will be used to filter the elements
      switch (attrOperator) {
        case '=': // Equality
          checkFunction = function(e) { return (e.getAttribute(attrName) == attrValue); };
          break;
        case '~': // Match one of space seperated words 
          checkFunction = function(e) { return (e.getAttribute(attrName).match(new RegExp('\\b'+attrValue+'\\b'))); };
          break;
        case '|': // Match start with value followed by optional hyphen
          checkFunction = function(e) { return (e.getAttribute(attrName).match(new RegExp('^'+attrValue+'-?'))); };
          break;
        case '^': // Match starts with value
          checkFunction = function(e) { return (e.getAttribute(attrName).indexOf(attrValue) == 0); };
          break;
        case '$': // Match ends with value - fails with "Warning" in Opera 7
          checkFunction = function(e) { return (e.getAttribute(attrName).lastIndexOf(attrValue) == e.getAttribute(attrName).length - attrValue.length); };
          break;
        case '*': // Match ends with value
          checkFunction = function(e) { return (e.getAttribute(attrName).indexOf(attrValue) > -1); };
          break;
        default :
          // Just test for existence of attribute
          checkFunction = function(e) { return e.getAttribute(attrName); };
      }
      currentContext = new Array;
      var currentContextIndex = 0;
      for (var k = 0; k < found.length; k++) {
        if (checkFunction(found[k])) {
          currentContext[currentContextIndex++] = found[k];
        }
      }
      // alert('Attribute Selector: '+tagName+' '+attrName+' '+attrOperator+' '+attrValue);
      continue; // Skip to next token
    }
    
    if (!currentContext[0]){
    	return;
    }
    
    // If we get here, token is JUST an element (not a class or ID selector)
    tagName = token;
    var found = new Array;
    var foundCount = 0;
    for (var h = 0; h < currentContext.length; h++) {
      var elements = currentContext[h].getElementsByTagName(tagName);
      for (var j = 0; j < elements.length; j++) {
        found[foundCount++] = elements[j];
      }
    }
    currentContext = found;
  }
  return currentContext;
}

/* That revolting regular expression explained 
/^(\w+)\[(\w+)([=~\|\^\$\*]?)=?"?([^\]"]*)"?\]$/
  \---/  \---/\-------------/    \-------/
    |      |         |               |
    |      |         |           The value
    |      |    ~,|,^,$,* or =
    |   Attribute 
   Tag
*/

/*
	@filename	: function.js
    @filedesc	: 기능함수 모음
	@date		: 2015.10.06;
	@author		: Jinwoo.Yuk;
*/


/**
 * @name  showCountUp
 * @desc  display a number of counting up keyup event 
 * @param obj - TextArea object 
 */
function showCountUp(obj) {
	var cu = obj.getAttribute("showcountup");
	var mx = obj.getAttribute("maxlength");
	
	if (cu) {
		var iCount = obj.value.length;
		
		//Chrome
		if("Chrome" == getBrowserType() ) {
			if(obj.value.match(/\n/g)) {
				iCount += obj.value.match(/\n/g).length
			}
		}
		
		if (iCount > 0) {
			document.getElementById(cu).innerHTML = numberFormat(iCount);
		} else {
			document.getElementById(cu).innerHTML = "0";
		}
		
		if (mx != null && mx != undefined) {
			if (iCount == mx) {
				mx = numberFormat(mx);
				alert("최대 " + mx + "자까지 작성 가능합니다.");
			}
		}
	}
}

/**
 * @name  getBrowserType
 * @desc  retrieve a kind of client browser and detail version info  
 */
function getBrowserType(){
          
        var _ua = navigator.userAgent;
        var rv = -1;
         
        //IE 11,10,9,8
        var trident = _ua.match(/Trident\/(\d.\d)/i);
        if( trident != null )
        {
            if( trident[1] == "7.0" ) return rv = "IE11";
            if( trident[1] == "6.0" ) return rv = "IE10";
            if( trident[1] == "5.0" ) return rv = "IE09";
            if( trident[1] == "4.0" ) return rv = "IE08";
        }
         
        //IE 7...
        if( navigator.appName == 'Microsoft Internet Explorer' ) return rv = "IE" + 7;
         
        /*
        var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
        if(re.exec(_ua) != null) rv = parseFloat(RegExp.$1);
        if( rv == 7 ) return rv = "IE" + 7; 
        */
         
        //other
        var agt = _ua.toLowerCase();
        if (agt.indexOf("chrome") != -1) return 'Chrome';
        if (agt.indexOf("opera") != -1) return 'Opera'; 
        if (agt.indexOf("staroffice") != -1) return 'Star Office'; 
        if (agt.indexOf("webtv") != -1) return 'WebTV'; 
        if (agt.indexOf("beonex") != -1) return 'Beonex'; 
        if (agt.indexOf("chimera") != -1) return 'Chimera'; 
        if (agt.indexOf("netpositive") != -1) return 'NetPositive'; 
        if (agt.indexOf("phoenix") != -1) return 'Phoenix'; 
        if (agt.indexOf("firefox") != -1) return 'Firefox'; 
        if (agt.indexOf("safari") != -1) return 'Safari'; 
        if (agt.indexOf("skipstone") != -1) return 'SkipStone'; 
        if (agt.indexOf("netscape") != -1) return 'Netscape'; 
        if (agt.indexOf("mozilla/5.0") != -1) return 'Mozilla';
    }

/**
 * @name  fnDoSubmit
 * @desc  submit a dynamic form object 
 * @param strURL
 * @param arrData
 * @param strTarget
 * @param strMethod
 */
function fnDoSubmit(strURL, arrData, strTarget, strMethod) {
//alert( " >> fnDoSubmit  :   " + strURL+" // "+arrData+" // "+strTarget+" // "+strMethod );
	var objTime = new Date();
	var strFormID = "frm" + objTime.getTime();
//alert( " >> fnDoSubmit  :   " + strFormID );
    var iFrameEL = $("<iframe title='iFrameEL' src='' name='" + strTarget + "' style='width:0px;hegiht:0px;display:none;'>");
    if ($("iframe[name=" + strTarget + "]").length == 0) {
		iFrameEL.appendTo("body");
    }
	var formEL = $("<form />").attr("id", strFormID).attr("name", strFormID).attr("action", strURL);
	if(!strMethod) {
		strMethod = "post";
	}
	formEL.attr("method", strMethod);

//alert( " >> fnDoSubmit  :   " + iFrameEL.html() );
	if(strTarget) {
		formEL.attr("target", strTarget);
	}

	for(index in arrData) {
		var strType = arrData[index].type;
		if(!strType) {
			strType = "hidden";
		}
		var strName = arrData[index].name;
		var strValue = arrData[index].value;
		$("<input />").attr("type", strType).attr("name", strName).val(strValue).appendTo(formEL);
	}
	formEL.appendTo("body");
	formEL.submit();
}

/**
 * @name	Popup
 * @desc	open popup
 * @author	Jinwoo.Yuk
 * @version	2013.04.23
*/
var Popup = function () {
	this.open = function (opt) {
		var def = {
			target: "_blank",
			href: null,
			width: screen.width / 2,
			height: screen.height / 2,
			titlebar: "no",
			status: "no",
			resizable: "no",
			toolbar: "no",
			scrollbars: "no",
			menubar: "no"
		};
		var options = $.extend(def, opt);
		var posY = (parseInt(screen.height / 2)) - (parseInt(options.height / 2));
		var posX = (parseInt(screen.width / 2)) - (parseInt(options.width / 2));
		var win = window.open(options.href, options.target, 'titlebar=' + options.titlebar + ', screenX=' + posX + ', screenY=' + posY + ', left=' + posX + ', top=' + posY + ', status=' + options.status + ', resizable=' + options.resizable + ', toolbar=' + options.toolbar + ', scrollbars=' + options.scrollbars + ', menubar=' + options.menubar + ', width=' + options.width + ', height=' + options.height);
		
		if (win) {
			win.focus();
		} else {
			alert("차단된 팝업을 해제해 주세요.");
		}
		
		return false;
	};
};

/**
 * @name	 closePopup
 * @desc	 close popup window
 * @author   Jinwoo.Yuk
 * @version  2015.02.05
 */
function closePopup() {
	window.open("", "_self").close();
}

/**
 * @name     getUrlVars
 * @desc     get Parameter
 * @author   Jinwoo.Yuk
 * @version  2013.06.03
 * @use
    var allVars = $.getUrlVars();
    var byName = $.getUrlVar('name');
*/
$.extend({
    getUrlVars: function () {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    },
    getUrlVar: function (name) {
        return $.getUrlVars()[name];
    }
});

/**
 * @name	move page
 * @desc	move page
 * @author	Jinwoo.Yuk
 * @version	2014.10.08
*/
function movePage(msg, page) {
    msg = (msg != "" && typeof(msg) == "string" && msg != undefined) ? msg : "";
    page = (page != undefined) ? page : "/";

    if (msg != "") {
        alert(msg);
    }
    
    var hasReferLink = document.createElement('a');
	    hasReferLink.href = page;
    document.body.appendChild(hasReferLink);
    
    hasReferLink.click();    
}


/**
 * @name	getCustomDate
 * @desc	현재 날짜로부터 과거의 날짜를 조건을 주어 구한다.
 * @author	Jinwoo.Yuk
 * @version	2014.10.08
 * @use : type - 'd':일/'m':월/'y':년 (toLowerCase('y') - char(1))
 *        gap - 차이 integer
 *        sFormat - 날짜형식 (변수:YYYY(년), MM(월), DD(일))
 *        isFirst - 해당하는 날짜의 첫날(1일) 반환
*/
function getCustomDate(type, gap, sFormat, isFirst) {
	var sDate = null;
	var toDay = new Date();
	var nDate = new Date(toDay);
	var strDateType = "YYYYMMDD";

	if (sFormat != undefined)
	{
		strDateType = sFormat;
	}

	switch (type) {
		case "d": //일수
			nDate.setDate(nDate.getDate() - gap);
			break;
		case "m": //달수
			nDate.setMonth(nDate.getMonth() - gap);
			break;
		case "y": //년수
			nDate.setFullYear(nDate.getFullYear() - gap);
			break;
	}
	sDate = new Date(nDate);

	var strMonth = sDate.getMonth() + 1;
	strMonth = (strMonth < 10) ? ("0" + strMonth) : strMonth;

	var strDate = sDate.getDate();
	if (isFirst) {
		strDate = "01";
	} else {
		strDate = (strDate < 10) ? ("0" + strDate) : strDate;
	}

	strDateType = strDateType.replace("YYYY", sDate.getFullYear());
	strDateType = strDateType.replace("MM", strMonth);
	strDateType = strDateType.replace("DD", strDate);

	return strDateType;
}

/**
 * @name	numberFormat
 * @desc	천단위 콤마(,) 찍기
 * @author	Jinwoo.Yuk
 * @version	2014.10.08
*/
function numberFormat (val) {
	
	if (typeof(val) == "number") {
		val += "";
	}
	if (val.substring(0, 1) == '-') { 
		val = val.substring(1);
		return '-' + val.split(/(?=(?:\d{3})+(?:\.|$))/g).join(',');
	}
	return val.split(/(?=(?:\d{3})+(?:\.|$))/g).join(',');
}


/**
 * @name	makeOption
 * @desc	<option>를 만든다.
 * @author	Jinwoo.Yuk
 * @version	2014.10.18
 * @use : makeOption(obj, type, rType, selVal, aList) 
 		obj : target <select> name
 		type : email 등등
        rType : true (<option>을 채워줌) / false (<option>태그를 리턴)
        selVal : 기본 선택값
        aList : option을 만들 데이터목록 ex) [ [value, text], [value, text] ,...]
 */
var makeOptionList = {
    "tel" : [
          ["010", "010"]
        , ["011", "011"]
        , ["016", "016"]
        , ["017", "017"]
        , ["018", "018"]
        , ["019", "019"]
    ]
    , 
    "phone" : [
             ["02", "02"]
             , ["031", "031"]
             , ["032", "032"]
             , ["033", "033"]
             , ["041", "041"]
             , ["042", "042"]
             , ["043", "043"]
             , ["051", "051"]
             , ["052", "052"]
             , ["053", "053"]
             , ["054", "054"]
             , ["055", "055"]
             , ["061", "061"]
             , ["062", "062"]
             , ["063", "063"]
             , ["064", "064"]
             , ["070", "070"]
             ]
	,
	
	
    "email" : [
          ["", "직접입력"]
        , ["hanmail.net", "다음(한메일)"]
        , ["nate.com", "네이트"]
        , ["dreamwiz.com", "드림위즈"]
        , ["paran.com", "파란닷컴"]
        , ["naver.com", "네이버"]
        , ["empal.com", "엠팔"]
        , ["chollian.net", "천리안"]
        , ["freechal.com", "프리챌"]
        , ["hanafos.com", "하나포스"]
        , ["korea.com", "코리아닷컴"]
    ]
	, '시도' : [['', '시/도를선택하세요'], ['서울', '서울특별시'], ['경기', '경기도'], ['인천', '인천광역시'], ['대전', '대전광역시'], ['세종특별', '세종특별자치시'], ['충청', '충청도'], ['광주광역시', '광주광역시'], ['전라', '전라도'], ['부산', '부산광역시'], ['대구', '대구광역시'], ['울산', '울산광역시'], ['경상', '경상도'], ['강원', '강원도'], ['제주', '제주특별자치도']]
    , '서울' : [['', '선택하세요'], ['강남구'], ['강동구'], ['강북구'], ['강서구'], ['관악구'], ['광진구'], ['구로구'], ['금천구'], ['노원구'], ['도봉구'], ['동대문구'], ['동작구'], ['마포구'], 
               ['서대문구'], ['서초구'], ['성동구'], ['성북구'], ['송파구'], ['양천구'], ['영등포구'], ['용산구'], ['은평구'], ['종로구'], ['중구'], ['중랑구']]
    , '경기' : [['', '선택하세요'], ['가평군'], ['고양시 덕양구 '], ['고양시 일산동구 '], ['고양시 일산서구 '], ['과천시'], ['광명시'], ['광주시'], ['구리시'], ['군포시'], ['김포시'], 
                  ['남양주시'], ['동두천시'], ['부천시'], ['성남시 분당구 '], ['성남시 수정구 '], ['성남시 중원구 '], 
                  ['수원시 권선구 '], ['수원시 영통구 '], ['수원시 장안구 '], ['수원시 팔달구 '], ['시흥시'], ['안산시 단원구 '], ['안산시 상록구 '], ['안성시'], 
                  ['안양시 동안구 '], ['안양시 만안구 '], ['양주시'], ['양평군'], ['여주시'], ['연천군'], ['오산시'], ['용인시 기흥구 '], ['용인시 수지구 '], 
                  ['용인시 처인구 '], ['의왕시'], ['의정부시'], ['이천시'], ['파주시'], ['평택시'], ['포천시'], ['하남시'], ['화성시']]
    , '인천' : [['', '선택하세요'], ['강화군'], ['계양구'], ['미추홀구'], ['남동구'], ['동구'], ['부평구'], ['서구'], ['연수구 '], ['옹진군'], ['중구']]
    , '대전' : [['', '선택하세요'], ['대덕구'], ['동구'], ['서구'], ['유성구'], ['중구']]
    , '세종특별' : [['','시/군/구 없음']]
    , '충청' : [['', '선택하세요'], ['계룡시'], ['공주시'], ['괴산군'], ['금산군'], ['논산시'], ['단양군'], ['당진시'], ['보령시'], ['보은군'], ['부여군'], ['서산시'], ['서천군'], 
                    ['아산시'], ['영동군'], ['예산군'], ['옥천군'], ['음성군'], ['제천시'], ['증평군'], ['진천군'], ['천안시 동남구 '], ['천안시 서북구 '], 
                     ['청양군'], ['청원군'], ['청주시 상당구 '], ['청주시 서원구 '], ['청주시 청원구 '], ['청주시 흥덕구 '], ['충주시'], ['태안군'], ['홍성군']]
    , '광주광역시' : [['', '선택하세요'], ['광산구'], ['남구'], ['동구'], ['북구'], ['서구']]
    , '전라' : [['', '선택하세요'], ['강진군'], ['고창군'], ['고흥군'], ['곡성군'], ['광양시'], ['구례군'], ['군산시'], ['김제시'], ['나주시'], ['남원시'], ['담양군'], ['목포시'], 
                ['무안군'], ['무주군'], ['보성군'], ['부안군'], ['순창군'], ['순천시'], ['신안군'], ['여수시'], ['영광군'], ['영암군'], ['완도군'], ['완주군'], 
                ['익산시'], ['임실군'], ['장성군'], ['장수군'], ['장흥군'], ['전주시 덕진구 '], ['전주시 완산구 '], ['정읍시'], ['진도군'], ['진안군'], ['함평군'], 
                ['해남군'], ['화순군']]
    , '부산' : [['', '선택하세요'], ['강서구'], ['금정구'], ['기장군'], ['남구'], ['동구'], ['동래구'], ['부산진구'], ['북구'], ['사상구'], ['사하구'], ['서구'], ['수영구'], ['연제구'], 
               ['영도구'], ['중구'], ['해운대구']]
    , '대구' : [['', '선택하세요'], ['남구'], ['달서구'], ['달성군'], ['동구'], ['북구 '], ['서구'], ['수성구'], ['중구']]
    , '울산' : [['', '선택하세요'], ['남구'], ['동구'], ['북구'], ['울주군'], ['중구']]
    , '경상' : [['', '선택하세요'], ['거제시'], ['거창군'], ['경산시'], ['경주시'], ['고령군'], ['고성군'], ['구미시'], ['군위군'], ['김천시'], ['김해시'], ['남해군'], ['문경시']
                    ,['밀양시'], ['봉화군'], ['사천시'], ['산청군'], ['상주시'], ['성주군'], ['안동시'], ['양산시'], ['영덕군'], ['영양군'], ['영주시'], ['영천시']
                    ,['예천군'], ['울릉군'], ['울진군'], ['의령군'], ['의성군'], ['진주시'], ['창녕군'], ['창원시 마산합포구 '], ['창원시 마산회원구']
                    ,['창원시 성산구 '], ['창원시 의창구 '], ['창원시 진해구 '], ['청도군'], ['청송군'], ['칠곡군'], ['통영시'], ['포항시 남구']
                    ,['포항시 북구 '], ['하동군'], ['함안군'], ['함양군'], ['합천군']]
    , '강원' : [['', '선택하세요'], ['강릉시'], ['고성군'], ['동해시'], ['삼척시'], ['속초시'], ['양구군'], ['양양군'], ['영월군'], ['원주시'], ['인제군'], ['정선군'], ['철원군'], ['춘천시'], ['태백시'], ['평창군'], ['홍천군'], ['화천군'], ['횡성군']]
    , '제주' : [['', '선택하세요'], ['서귀포시'], ['제주시']]
};

function makeOption(obj, type, rType, selVal, aList) {
	var list = "";
    var option = "";

    if (type != "") list = makeOptionList[type];
    if (aList != undefined) list = aList;

    var selected = "";
    for (var i = 0, iCnt = list.length ; i < iCnt ; i++) {
        if (list[i][0] == selVal) selected = " selected";
        else selected = "";

		if (list[i].length > 1) {
			option += "<option value=\"" + $.trim(list[i][0]) + "\"" + selected + ">" + $.trim(list[i][1]) + "</option>";
		} else {
			option += "<option value=\"" + $.trim(list[i][0]) + "\"" + selected + ">" + $.trim(list[i][0]) + "</option>";
		}
    }

    if (rType) {
        $("select[name=" + obj + "]").eq(0).html(option).promise().done(function(){
       		$(this).eq(0).resetSS();
    	});
    } else {
        return option;
    }
}

/**
 * @name	jsonToserialize
 * @desc	JSON 데이터를 특정문자열로 시리얼라이즈 한다.
 * @author	Jinwoo.Yuk
 * @version	2014.10.18
 * @use     jsonToserialize(json, '|', 'v')
*/
function jsonToserialize(oJson, cGubun, type) {
	var sSerial = "";
    $.each(oJson, function(k, v) {
        switch(type) {
            case "k": //key만
				sSerial += (k + cGubun);
                break;
            case "v": //value만
				sSerial += (v + cGubun);
                break;
            case "kv": //key=value 로
				sSerial += ((k + "=" + v) + cGubun);
                break;                
        }
    });
    return sSerial.substr(0, (sSerial.length - 1));
}

/**
 * @name	compareJson
 * @desc	두개의 JSON을 비교하여 다른값, 없는 값을 JSON으로 리턴
 * @author	Jinwoo.Yuk
 * @version	2014.10.20
 * @use     compareJson({}, {});
*/
function compareJson(oriJson, targetJson) {
	//비교 결과 JSON (다른 것 또는 oriJson에 없는 targetJson의 값이 들어감)
	var rJson = {};

	//oriJson과 값이 다른 targetJson값
	$.each(oriJson, function(k, v) {
		if (targetJson[k] != undefined)
		{
			if (oriJson[k] != targetJson[k]) rJson[k] = targetJson[k];
		}
	});

	//targetJson에만 있는거
	$.each(targetJson, function(k, v) {
		if (oriJson[k] == undefined) rJson[k] = v; 
	});

	return rJson;
}

/**
 * @name	execJAjax
 * @desc	execute ajax by jquery
 * @author	Jinwoo.Yuk
 * @version	2014.10.20
 * @use		execJAjax(uri, type, datas, callback)
*/
function execJAjax(u, t, d, c, is_async) {
	if(is_async === undefined) {
		is_async = true;
	}
	
    $.ajax({
        type : t
        , data : d
        , url : u
        , async : is_async 
    }).done(function (data) {
        if (typeof(c) == "function") {
            c(data);
        }
    }); 
}

/**
 * @name	callLogOut
 * @desc	로그아웃
 * @author	Jinwoo.Yuk
 * @version	2014.10.27
 * @use     callLogOut(callback)
*/
function callLogOut (callback) {
	if (callback == undefined && typeof(callback) != "function") {
		callback = movePage;
	}
	execJAjax("/api/kia_korea/base/mb01/MemberSign.signOut", "POST", {}, function (data) {
		if (data.result == "Success") {
			callback();
		}
	},false);
}


/**
 * @name	commonCodeLib
 * @desc	공통코드 제공 라이브러리
 * @use
 * 			commonCodeLib.init("LK01CT");	//공통코드 대분류 항목 조회
 *			var sValue = commonCodeLib.getValue("LK01CT04");	//상세 코드값 조회
 */
var commonCodeLib = {

	/**
	 * @name	comCdMap
	 */
	comCdMap : {},
	comCdList : [],
	
	/**
	 * @name	init
	 * @desc	Retrieve common code list
	 */
	init : function(majorCode) {
		//[Step-1] : Retrieve common code list
		execJAjax("/api/kia_korea/base/cc01/commonCode.selectCommonCodeList", "GET", {"sc.parentCd" : majorCode}, function (data) {
			if (data.result == "Success") {
				//[Step-2] : Split by major code
				//sc.parentCd=LK01CT
				commonCodeLib.comCdList = data.dataInfo;

				//[Step-3] : Set to comCdMap variable
				for(var i=0; i< data.dataInfo.length; i++) {
					var comCd = data.dataInfo[i];
					commonCodeLib.comCdMap[comCd.code] = comCd.text;
				}
			}
		}, false);
		
		
	},
	
	/**
	 * @name	getValue
	 */
	getValue : function(code) {
		return this.comCdMap[code];
	}
};

/**
 * @name	carLib
 * @desc	차량정보 제공 라이브러리
 * @use
 * 			carLib.init("car");	//대표차종 항목 조회
 *			var carList = carLib.getList();	//전체 리스트
 *			var car = carLib.getModel("optima");	//대표차종 정보 > 차량 Node명으로 조회(O), 차량코드(X)
 */
var carLib = {
	
	/**
	 * @name	modelMap
	 */
	modelMap : {},
	
	/**
	 * @name	modelList
	 */
	modelList : [],

	/**
	 * @name	init
	 * @desc	Retrieve car list
	 */
	init : function(domainModel, objParam) {
		
		if(!domainModel) {
			domainModel = "car";
		}
		
		//[Step-1] : Retrieve car list
		var url = "";
		
		if(domainModel == "car") {
			url = "/api/kia_korea/base/carInfo.selectCarList";
		} else if(domainModel == "trim") {
			url = "/api/kia_korea/base/trimInfo.selectTrimList";
		} else if(domainModel == "option") {
			url = "/api/kia_korea/base/optionInfo.selectOptionList";
		}
		
		execJAjax(url, "GET", objParam, function (data) {
			if (data.result == "Success") {
				//[Step-2] : search with objParam

				//[Step-3] : Set to modelList variable
				carLib.modelList = data.dataInfo;
				
				//[Step-3] : Set to modelMap variable
				for(var i in data.dataInfo) {
					var model = data.dataInfo[i];
					carLib.modelMap[model.key] = model;
				}
			}
		}, false);
	},
	
	/**
	 * @name	getCar
	 */
	getModel : function(key) {
		return this.modelMap[key];
	}
	
};

/**
 * @name	fnNullConvert
 * @param	src > 원본 문자열
 * @param	repalceStr > Null 일 경우 대체 문자열
 */
function fnNullConvert(src, repalceStr) {
	
	var result = src;
	
	if(typeof(src) == "object") {
		result = {};
		
		for(var key in src) {
			
			if(src[key] == null) {
				if(repalceStr) {
					src[key] = repalceStr;
				} else {
					delete src[key];
				}
			} else if(typeof(src[key]) == "object") {
				src[key] = fnNullConvert(src[key], repalceStr);
				
			}
		}
		result = src;
	}
	
	if(src == null || src == undefined) {
		result = repalceStr;
	}
	
	return result;
}

/**
 * @name   fnEval
 * @param  obj
 * @return javascript object
 */
function fnEval (obj) {
	var eObj = null;
	if (obj != null) {
		eObj = eval('(' + obj + ')');
	}
	return eObj;
}

/**
 * 파라미터를 생성 (JSON to Parameter)
 * @param parameter로 만들 json
 * @param charset
 */
function makeParameterString(obj, charset) {
	var params = "";
	var encoding = "_charset_=";
		encoding += (charset != undefined) ? charset : "UTF-8";
		encoding += "&";
	
	if (obj != null) {
		params = $.param(obj);
//		params = decodeURIComponent(params).replace(/&amp;/g, '&');
		params = params.replace(/&amp;/g, '&');
	}
	
	return (encoding + params);
}


function msieversion() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)){
       return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie))); 
    } 
    return false;
}

var IE_VER = msieversion();
/**
 * 차량관련 파일을 다운로드
 * @param model key
 * @param 파일 type ('catalog' or 'price')
 */
var downloadCarFile = {
		
		catalog : function(model){
			if (model != null && model != undefined && model != "") {
				if (IE_VER) {
					var popup = new Popup();
					var def = {
							target: "catalog",
							href: "/api/kia_korea/common/file.catalog/" + model,
							width: 10,
							height: 10,
						};
					popup.open(def);
				} else {
					var strURL = ("/api/kia_korea/common/file.catalog/" + model);
					var arrData = [];
					var strTarget = "catalog";
	
					fnDoSubmit(strURL, arrData, strTarget, "get");
				}
			}
		},

		price : function(model){
			if (model != null && model != undefined && model != "") {
				if (IE_VER) {
					var popup = new Popup();
					var def = {
							target: "price",
							href: "/api/kia_korea/common/file.price/" + model,
							width: 10,
							height: 10,
						};
					popup.open(def);
				} else {
					var strURL = ("/api/kia_korea/common/file.price/" + model);
					var arrData = [];
					var strTarget = "price";
					
					fnDoSubmit(strURL, arrData, strTarget, "get");
				}
			}
		},
		
		commercialInfo : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo",
						href: "/api/kia_korea/common/file.commercialInfo/",
						width: 10,
						height: 10,
					};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo/");
				var arrData = [];
				var strTarget = "commercialInfo";
				
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},
		commercialInfo2 : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo2",
						href: "/api/kia_korea/common/file.commercialInfo2/",
						width: 10,
						height: 10,
				};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo2/");
				var arrData = [];
				var strTarget = "commercialInfo2";
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},
		commercialInfo3 : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo3",
						href: "/api/kia_korea/common/file.commercialInfo3/",
						width: 10,
						height: 10,
				};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo3/");
				var arrData = [];
				var strTarget = "commercialInfo3";
				
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},
		commercialInfo4 : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo4",
						href: "/api/kia_korea/common/file.commercialInfo4/",
						width: 10,
						height: 10,
				};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo4/");
				var arrData = [];
				var strTarget = "commercialInfo4";
				
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},
		
		// 카니발 아웃도어 & 하이 리무진 핵심특장부품 pdf 파일 다운로드 관련 주석처리
		/*commercialInfo5 : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo5",
						href: "/api/kia_korea/common/file.commercialInfo5/",
						width: 10,
						height: 10,
				};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo5/");
				var arrData = [];
				var strTarget = "commercialInfo5";
				
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},
		commercialInfo6 : function(){
			if (IE_VER) {
				var popup = new Popup();
				var def = {
						target: "commercialInfo6",
						href: "/api/kia_korea/common/file.commercialInfo6/",
						width: 10,
						height: 10,
				};
				popup.open(def);
			} else {
				var strURL = ("/api/kia_korea/common/file.commercialInfo6/");
				var arrData = [];
				var strTarget = "commercialInfo6";
				
				fnDoSubmit(strURL, arrData, strTarget, "get");
			}
		},*/
		commercialInfoAll : function(){
			this.commercialInfo();
			this.commercialInfo2();
			this.commercialInfo3();
			this.commercialInfo4();
		},
		
		
		both : function(model){
			if (model != null && model != undefined && model != "") {
				this.catalog(model);
				this.price(model);
			}
		}
	};


/**
 * 네이버 지도 동적 호출 함수
 * @param 지도 Lat
 * @param 지도 Lng
 */
var currOpenIdx = 0;
function openMapDiv(simpleLat,simpleLng, index) {
	$(".mapArea").html("");
	var evt = $(event.target);
	var mapId = "mapArea" + index;
    var uls = $("ul.bbs_type1.branchList");

    if(uls.find("li").eq(index-1).hasClass("bbs_open")){
        uls.find("li").eq(index-1).removeClass("bbs_open");
    } else {
        uls.find("li.bbs_open").removeClass("bbs_open");
        uls.find("li").eq(index-1).addClass("bbs_open");
        var posTop = uls.find("li").eq(index-1).offset().top - uls.find("li").height();
        $("html, body").animate({scrollTop: posTop}, 30);
        
    }

    fnSimpleMap(simpleLat, simpleLng, mapId);

    var lastKeyWindowHeight = 800, lastKeyWindowWidth = 800;
    $(window).resize(function() {
        var winWidth = $(window).width(), winHeight = $(window).height();
        if(winHeight != lastKeyWindowHeight || winWidth != lastKeyWindowWidth){
            lastKeyWindowHeight = winWidth;
            lastKeyWindowWidth = winHeight;

                if(winWidth < 1008 && winWidth > 750){
                    //타블렛 사이즈
                    var mapWidth = winWidth - 150;
                    var mapHeight = mapWidth / 1.56;
                    simpleMap.setSize(new naver.maps.Size(mapWidth, mapHeight));    
                }else if(winWidth < 751){
                    //모바일 사이즈
                    var mapWidth = winWidth - 60;
                    var mapHeight = mapWidth / 1.56;
                    simpleMap.setSize(new naver.maps.Size(mapWidth, mapHeight));    
                }else{
                    //웹사이즈
                	simpleMap.setSize(new naver.maps.Size(819, 560));
                }

        }
    }).resize();
}

/**
 * e-lead 연계 이벤트 메서드
 * @param event_id	페이지 코드
 * @param menu_id	페이지 URL
 * @param carType	브랜드코드 (대표차량코드 등)
 */
function fnELeadEvent (event_id, menu_id, carType) {
	if (menu_id.indexOf("#URL") > -1) {
		menu_id = document.location.href;
		
		if (menu_id.indexOf("#") > -1) {
			var split_menu_id = menu_id.split("#");
			menu_id = split_menu_id[0];
		}
	}
	
	if (typeof(postEvent) == "function") {
		postEvent(event_id, menu_id, carType); //bridge.js
	}
}

/**
 * FAQ용 e-lead 연계 이벤트
 * @param faq_category_id	FAQ 분류코드
 */
function fnFAQELeadEvent (faq_category_id) {
	var event_id = "";
	switch (faq_category_id) {
		case "FQ01CT01": //홈페이지
			event_id = "wkia_faq_website_detail";
			break;
		case "FQ01CT02": //영업 및 구입
			event_id = "wkia_faq_purchase_detail";
			break;
		case "FQ01CT03": //
			event_id = "wkia_faq_service_detail";
			break;			
	}
	
	if (event_id != "") {
		fnELeadEvent(event_id, "#URL", "BRAND");
	}
}

/**
 * EVENT용 e-lead 연계 이벤트
 * @param event_category_id	EVENT 분류코드
 */
function fnEVENTELeadEvent (event_category_id) {
	var event_id = "";
	if (event_category_id == "P") {
		event_id = "wkia_event_ongoing_detail_pl";
	} else {
		event_id = "wkia_event_winner_detail_pl";
	}
	
	if (event_id != "") {
		fnELeadEvent(event_id, "#URL", "BRAND");
	}
}

/**
 * 전시/시승차용 e-lead 연계 이벤트 (위치)
 * @param location_id
 */
function fnTestDispCarLocationELeadEvent (location_id) {
	location_id = parseInt(location_id, 10);
	
	var event_id = "";
	if (location_id == 1) {
		event_id = "sptool_tdcar_search_location_popup";
	} else if (location_id == 2) {
		event_id = "sptool_dpcar_search_location_popup";
	}
	
	if (event_id != "") {
		fnELeadEvent(event_id, "#URL", "BRAND");
	}
}

/**
 * 전시/시승차용 e-lead 연계 이벤트 (색상)
 * @param color_id
 */
function fnTestDispCarColorELeadEvent (color_id) {
	color_id = parseInt(color_id, 10);
	
	var event_id = "";
	if (color_id == 1) {
		event_id = "sptool_tdcar_search_modelcolor_popup";
	} else if (color_id == 2) {
		event_id = "sptool_dpcar_search_modelcolor_popup";
	}
	
	if (event_id != "") {
		fnELeadEvent(event_id, "#URL", "BRAND");
	}
}

/**
 * 문자열의 byte를 구한다
 * @param str
 */
function fnGetByte (str) {
	var bytes = 0;
	if (str.length > 0) {
		for (var i = 0, iCnt = str.length ; i < iCnt ; i++) {
			var charCode = str.charCodeAt(i);
	        if (charCode <= 0x00007F) {
	        	bytes += 1;
	        } else if (charCode <= 0x0007FF) {
	        	bytes += 2;
	        } else if (charCode <= 0x00FFFF) {
	        	bytes += 3;
	        } else {
	        	bytes += 4;
	        }
		}
	}
	return bytes;
}


/**
 * Get parameter map from suffix
 * The page ...page.html/a/b/c/d
 * will return Object {a: "b", c: "d"}
 */
function getSuffixMapFromURL(){
	var rt = null;
	var docUrl = document.location.pathname;
	var suffixMap = {};
	var suffix = (docUrl.indexOf(".html/") > -1) ? true : false;

	if(suffix) {
		var suffixArray = docUrl.split(".html/")[1].split("/");
		for(var i=0, iCnt=suffixArray.length; i < iCnt ; i+=2) {
			suffixMap[suffixArray[i]] =  suffixArray[i+1];
		}
		rt = suffixMap;
	}
	return rt;
}

/**
 * Convert htmlEntities
 * (&amp;, &gt, &lt )
 * to Special Characters
 * (&, <, >)
 */
function fnHtmlDecode(input){
	var e = document.createElement('div');
	e.innerHTML = input;
	return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}

/**
 * @name	replaceAll
 * @desc	Extend replace string
 * @author	Hong.Eunpyo
 * @version	2015.03.20
*/
String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement).trim();
};

//parseUri 1.2.2
//(c) Steven Levithan <stevenlevithan.com>
//MIT License

function parseUri (str) {
	var	o   = parseUri.options,
		m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
		uri = {},
		i   = 14;

	while (i--) uri[o.key[i]] = m[i] || "";

	uri[o.q.name] = {};
	uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
		if ($1) uri[o.q.name][$1] = $2;
	});

	return uri;
};

parseUri.options = {
	strictMode: false,
	key: ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],
	q:   {
		name:   "queryKey",
		parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	},
	parser: {
		strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
		loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	}
};

/**
 * 통합검색
 * 
 * @author 권기훈
 */
window.KRSearch = {

	search: function(keyword) {
		var reqUri = location.pathname;
		var isShortUrl = reqUri.indexOf("/kr/") == 0;
		var urlPrefix = isShortUrl ? "/kr" : "/content/kwcms/kr/ko";

		var url = urlPrefix + "/search.html";
		if (keyword && keyword.length > 0) {
			url += "?q=" + encodeURIComponent(keyword);
		}
		location.href = url;
	},
	
	topSearch: function() {
		var keyword = null;
		var elem = document.getElementById("globalSearch");
		var valueTrim = elem.value.replace(/(\s*)/g,"");
		if(valueTrim == ""){
			alert("검색어를 입력해주세요.");
			return;
		}
		
		if (elem) {
			keyword = elem.value;
		}
		KRSearch.search(keyword);
	}
};

function changeHanja(str){	
	var sBuf = "";
	var hanjaYn = false;
	for (var i=0; str.length > i; i++)
    {
		var cChar = str.charAt(i);
		var c = escape(cChar);	
		if(c >= '%u2E80' && c <= '%u2EFF') hanjaYn = true;
		if(c >= '%u3400' && c <= '%u4DBF') hanjaYn = true;
		if(c >= '%u4E00' && c <= '%u9FBF') hanjaYn = true;
		if(c >= '%uF900' && c <= '%uFAFF') hanjaYn = true;
		if(c >= '%u20000' && c <= '%u2A6DF') hanjaYn = true;
		if(c >= '%u2F800' && c <= '%u2FA1F') hanjaYn = true;
      
      	
      	if(hanjaYn){
      		sBuf += '<font face="윤고딕">';
      		sBuf += str.charAt(i);
      		sBuf += '</font>';
      	}else{
      		sBuf += str.charAt(i);
      	}
      	hanjaYn = false;
    }
	return sBuf;
}
/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2006, 2014 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (arguments.length > 1 && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * 기본 구성
 *
 * @author <leizongmin@gmail.com>
 */


// 기본 화이트리스트
var whiteList = {
  a:      ['target', 'href', 'title'],
  abbr:   ['title'],
  address: [],
  area:   ['shape', 'coords', 'href', 'alt'],
  article: [],
  aside:  [],
  audio:  ['autoplay', 'controls', 'loop', 'preload', 'src'],
  b:      [],
  bdi:    ['dir'],
  bdo:    ['dir'],
  big:    [],
  blockquote: ['cite'],
  br:     [],
  caption: [],
  center: [],
  cite:   [],
  code:   [],
  col:    ['align', 'valign', 'span', 'width'],
  colgroup: ['align', 'valign', 'span', 'width'],
  dd:     [],
  del:    ['datetime'],
  details: ['open'],
  div:    [],
  dl:     [],
  dt:     [],
  em:     [],
  font:   ['color', 'size', 'face'],
  footer: [],
  h1:     [],
  h2:     [],
  h3:     [],
  h4:     [],
  h5:     [],
  h6:     [],
  header: [],
  hr:     [],
  i:      [],
  img:    ['src', 'alt', 'title', 'width', 'height'],
  ins:    ['datetime'],
  li:     [],
  mark:   [],
  nav:    [],
  ol:     [],
  p:      [],
  pre:    [],
  s:      [],
  section:[],
  small:  [],
  span:   [],
  sub:    [],
  sup:    [],
  strong: [],
  table:  ['width', 'border', 'align', 'valign'],
  tbody:  ['align', 'valign'],
  td:     ['width', 'colspan', 'align', 'valign'],
  tfoot:  ['align', 'valign'],
  th:     ['width', 'colspan', 'align', 'valign'],
  thead:  ['align', 'valign'],
  tr:     ['rowspan', 'align', 'valign'],
  tt:     [],
  u:      [],
  ul:     [],
  video:  ['autoplay', 'controls', 'loop', 'preload', 'src', 'height', 'width']
};

/**
 * Matched to the processing method of a label
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag (tag, html, options) {
  // do nothing
}

/**
 * Tag is not matched to the processing method when a whitelist
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag (tag, html, options) {
  // do nothing
}

/**
 * Treatment when matched to the tag attributes
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr (tag, name, value) {
  // do nothing
}

/**
 * Processing method is not matched to the properties of the label when a whitelist
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr (tag, name, value) {
  // do nothing
}

/**
 * HTML ESCAPE
 *
 * @param {String} html
 */
function escapeHtml (html) {
  return html.replace(REGEXP_LT, '&lt;').replace(REGEXP_GT, '&gt;');
}

/**
 * 安全的标签属性值
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function safeAttrValue (tag, name, value) {
  // 转换为友好的属性值，再做判断
  value = friendlyAttrValue(value);

  if (name === 'href' || name === 'src') {
    // 过滤 href 和 src 属性
    // 仅允许 http:// | https:// | / 开头的地址
    value = value.trim();
    if (value === '#') return '#';
    if (value && !REGEXP_DEFAULT_ON_TAG_ATTR_1.test(value)) {
      return '';
    }
  } else if (name === 'background') {
    // 过滤 background 属性 （这个xss漏洞较老了，可能已经不适用）
    // javascript:
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return '';
    }
  } else if (name === 'style') {
    // /*注释*/
    REGEXP_DEFAULT_ON_TAG_ATTR_3.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_3.test(value)) {
      return '';
    }
    // expression()
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return '';
    }
    // url()
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return '';
      }
    }
  }

  // 输出时需要转义<>"
  value = escapeAttrValue(value);
  return value;
}

// Regex
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/img;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/img;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/img;
var REGEXP_DEFAULT_ON_TAG_ATTR_1 = /^((https?:\/)?\/)/;
var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//mg;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/ig;
var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/ig;
var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//ig;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/ig;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/ig;

/**
 * Escape the double quotes
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote (str) {
  return str.replace(REGEXP_QUOTE, '&quote;');
}

/**
 * Escape the double quotes
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote (str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * Html coding for an entity to be escaped
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities (str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode (str, code) {
    return (code[0] === 'x' || code[0] === 'X')
            ? String.fromCharCode(parseInt(code.substr(1), 16))
            : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * The new entity encoding for html5 escaped danger
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities (str) {
  return str.replace(REGEXP_ATTR_VALUE_COLON, ':')
            .replace(REGEXP_ATTR_VALUE_NEWLINE, ' ');
}

/**
 * Clear invisible characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter (str) {
  var str2 = '';
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? ' ' : str.charAt(i);
  }
  return str2.trim();
}

/**
 * Property values will be converted into a general character label for analysis
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue (str) {
  str = unescapeQuote(str);             // 双引号
  str = escapeHtmlEntities(str);         // 转换HTML实体编码
  str = escapeDangerHtml5Entities(str);  // 转换危险的HTML5新增实体编码
  str = clearNonPrintableCharacter(str); // 清除不可见字符
  return str;
}

/**
 * Escape for the label attribute value output
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue (str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * Not remove the label onIgnoreTag whitelist approach
 */
function onIgnoreTagStripAll () {
  return '';
}

/**
 * Remove tag body
 *
 * @param {array} tags 要删除的标签列表
 * @param {function} next 对不在列表中的标签的处理函数，可选
 */
function StripTagBody (tags, next) {
  if (typeof(next) !== 'function') {
    next = function () {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag (tag) {
    if (isRemoveAllTag) return true;
    return (tags.indexOf(tag) !== -1);
  }

  var removeList = [];   // 要删除的位置范围列表
  var posStart = false;  // 当前标签开始位置

  return {
    onIgnoreTag: function (tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = '[/removed]';
          var end = options.position + ret.length;
          removeList.push([posStart !== false ? posStart : options.position, end]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return '[removed]';
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function (html) {
      var rethtml = '';
      var lastPos = 0;
      removeList.forEach(function (pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    }
  };
}

/**
 * Remarks tag removal
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag (html) {
  return html.replace(STRIP_COMMENT_TAG_REGEXP, '');
}
var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;


exports.whiteList = whiteList;
exports.onTag = onTag;
exports.onIgnoreTag = onIgnoreTag;
exports.onTagAttr = onTagAttr;
exports.onIgnoreTagAttr = onIgnoreTagAttr;
exports.safeAttrValue = safeAttrValue;
exports.escapeHtml = escapeHtml;
exports.escapeQuote = escapeQuote;
exports.unescapeQuote = unescapeQuote;
exports.escapeHtmlEntities = escapeHtmlEntities;
exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
exports.friendlyAttrValue = friendlyAttrValue;
exports.escapeAttrValue = escapeAttrValue;
exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
exports.StripTagBody = StripTagBody;
exports.stripCommentTag = stripCommentTag;

},{}],2:[function(require,module,exports){
/**
 * 模块入口
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var parser = require('./parser');
var FilterXSS = require('./xss');


/**
 * XSS过滤
 *
 * @param {String} html 要过滤的HTML代码
 * @param {Object} options 选项：whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml
 * @return {String}
 */
function filterXSS (html, options) {
	
  //20151210 J.H.KIM 입력내용이 null 일때 처리가 되어있지 않아 추가	
  if(html == null){
	return "";  
  }
  
  var xss = new FilterXSS(options);
  return xss.process(html);
}


// 输出
exports = module.exports = filterXSS;
exports.FilterXSS = FilterXSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];
for (var i in parser) exports[i] = parser[i];


// End use in the browser
if (typeof window !== 'undefined') {
  // Low version of browser support
  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (item) {
      for(var i=0;i<this.length;i++){
        if(this[i] == item) return i;
      }
      return -1;
    };
  }
  if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (fn, scope) {
      for (var i = 0; i < this.length; i++) fn.call(scope, this[i], i, this);
    };
  }
  if(!String.prototype.trim){
    String.prototype.trim = function () {
      return this.replace(/(^\s*)|(\s*$)/g, '');
    };
  }
  // 输出
  window.filterXSS = module.exports;
}

},{"./default":1,"./parser":3,"./xss":4}],3:[function(require,module,exports){
/**
 * Simple HTML Parser
 *
 * @author 老雷<leizongmin@gmail.com>
 */


/**
 * Get the name of the label
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {String}
 */
function getTagName (html) {
  var i = html.indexOf(' ');
  if (i === -1) {
    var tagName = html.slice(1, -1);
  } else {
    var tagName = html.slice(1, i + 1);
  }
  tagName = tagName.trim().toLowerCase();
  if (tagName[0] === '/') tagName = tagName.slice(1);
  if (tagName[tagName.length - 1] === '/') tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * Is Closed tags
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing (html) {
  return (html.slice(0, 2) === '</');
}

/**
 * Analysis of the HTML code, call the appropriate function to handle, returns after treatment HTML
 *
 * @param {String} html
 * @param {Function} onTag 处理标签的函数
 *   参数格式： function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml 对HTML进行转义的韩松
 * @return {String}
 */
function parseTag (html, onTag, escapeHtml) {
  'user strict';

  var rethtml = '';        // 待返回的HTML
  var lastPos = 0;         // 上一个标签结束位置
  var tagStart = false;    // 当前标签开始位置
  var quoteStart = false;  // 引号开始位置
  var currentPos = 0;      // 当前位置
  var len = html.length;   // HTML长度
  var currentHtml = '';    // 当前标签的HTML代码
  var currentTagName = ''; // 当前标签的名称

  // 逐个分析字符
  for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === '<') {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === '<') {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === '>') {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(tagStart,
                           rethtml.length,
                           currentTagName,
                           currentHtml,
                           isClosing(currentHtml));
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if (c === '"' || c === "'") {
          quoteStart = c;
          continue;
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < html.length) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

// 不符合属性名称规则的正则表达式
var REGEXP_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/img;

/**
 * Analysis tab HTML code, call the appropriate function to handle, returns HTML
 *
 * @param {String} html 如标签'<a href="#" target="_blank">' 则为 'href="#" target="_blank"'
 * @param {Function} onAttr 处理属性值的函数
 *   函数格式： function (name, value)
 * @return {String}
 */
function parseAttr (html, onAttr) {
  'user strict';

  var lastPos = 0;        // 当前位置
  var retAttrs = [];      // 待返回的属性列表
  var tmpName = false;    // 临时属性名称
  var len = html.length;  // HTML代码长度

  function addAttr (name, value) {
    name =  name.trim();
    name = name.replace(REGEXP_ATTR_NAME, '').toLowerCase();
    if (name.length < 1) return;
    retAttrs.push(onAttr(name, value || ''));
  };

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i),v;
    if (tmpName === false && c === '=') {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      continue;
    }
    if (tmpName !== false) {
      if (i === lastPos && (c === '"' || c === "'")) {
        var j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = html.slice(lastPos + 1, j).trim();
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (c === ' ') {
      v = html.slice(lastPos, i).trim();
      if (tmpName === false) {
        addAttr(v);
      } else {
        addAttr(tmpName, v);
      }
      tmpName = false;
      lastPos = i + 1;
      continue;
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, html.slice(lastPos));
    }
  }

  return retAttrs.join(' ').trim();
}

exports.parseTag = parseTag;
exports.parseAttr = parseAttr;

},{}],4:[function(require,module,exports){
/**
 * Filter XSS
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var parser = require('./parser');
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;


/**
 * Returns whether the value is empty
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull (obj) {
  return (obj === undefined || obj === null);
}

/**
 * Take the list of attributes within the tag string
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs (html) {
  var i = html.indexOf(' ');
  if (i === -1) {
    return {
      html:    '',
      closing: (html[html.length - 2] === '/')
    };
  }
  html = html.slice(i + 1, -1).trim();
  var isClosing = (html[html.length - 1] === '/');
  if (isClosing) html = html.slice(0, -1).trim();
  return {
    html:    html,
    closing: isClosing
  };
}

/**
 * XSS Filter objects
 *
 * @param {Object} options 选项：whiteList, onTag, onTagAttr, onIgnoreTag,
 *                               onIgnoreTagAttr, safeAttrValue, escapeHtml
 *                               stripIgnoreTagBody, allowCommentTag
 */
function FilterXSS (options) {
  options = options || {};

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error('Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time');
    }
    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }

  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onTag = options.onTag || DEFAULT.onTag;
  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
  this.options = options;
}

/**
 * Start processing
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function (html) {
  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml

  // 是否禁止备注标签
  if (!options.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }

  // 如果开启了stripIgnoreTagBody
  if (options.stripIgnoreTagBody) {
    var stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  } else {
    stripIgnoreTagBody = false;
  }

  var retHtml = parseTag(html, function (sourcePosition, position, tag, html, isClosing) {
    var info = {
      sourcePosition: sourcePosition,
      position:       position,
      isClosing:      isClosing,
      isWhite:        (tag in whiteList)
    };

    // 调用onTag处理
    var ret = onTag(tag, html, info);
    if (!isNull(ret)) return ret;

    // 默认标签处理方法
    if (info.isWhite) {
      // 白名单标签，解析标签属性
      // 如果是闭合标签，则不需要解析属性
      if (info.isClosing) {
        return '</' + tag + '>';
      }

      var attrs = getAttrs(html);
      var whiteAttrList = whiteList[tag];
      var attrsHtml = parseAttr(attrs.html, function (name, value) {

        // 调用onTagAttr处理
        var isWhiteAttr = (whiteAttrList.indexOf(name) !== -1);
        var ret = onTagAttr(tag, name, value, isWhiteAttr);
        if (!isNull(ret)) return ret;

        // 默认的属性处理方法
        if (isWhiteAttr) {
          // 白名单属性，调用safeAttrValue过滤属性值
          value = safeAttrValue(tag, name, value);
          if (value) {
            return name + '="' + value + '"';
          } else {
            return name;
          }
        } else {
          // 非白名单属性，调用onIgnoreTagAttr处理
          var ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull(ret)) return ret;
          return;
        }
      });

      // 构造新的标签代码
      var html = '<' + tag;
      if (attrsHtml) html += ' ' + attrsHtml;
      if (attrs.closing) html += ' /';
      html += '>';
      return html;

    } else {
      // 非白名单标签，调用onIgnoreTag处理
      var ret = onIgnoreTag(tag, html, info);
      if (!isNull(ret)) return ret;
      return escapeHtml(html);
    }

  }, escapeHtml);

  // 如果开启了stripIgnoreTagBody，需要对结果再进行处理
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};


module.exports = FilterXSS;
},{"./default":1,"./parser":3}]},{},[2]);

/*
	@filename	: sslRedirectLibrary.js
    @filedesc	: ssl변환
	@date		: 2015.02.13;
	@author		: KIMJIHWAN;
*/


/**
 * SSL 페이지 변환
 */
/**
 * @name	ssl redirect
 * @exe		new SSLRedirect()
 * @define	port.web
 * @define	port.ssl
 * @define  sUrlList
 */
var SSLRedirect	=	function(){};
SSLRedirect.prototype 	=	{
	/**
     * define info ssl 
     */
	infoRedirect	:	{
		sUrlList	:[
		    ""	// ex) 경로: 	"/om/experience-kia/test"   
		]
		,port	:{
			web 	: ""			//ex) ":8080"
			,ssl	: ""			//ex) ":8443"
		}
		,svr	:{
			scheme 		:	location.protocol	+ "//"
			,serverName :	location.hostname
			,portNum 	:	location.port == "" ? "" : ":"+location.port
			,uriPath 	: 	location.pathname
			,queryString:	location.href.split("?")[1]==undefined ? "":"?"+location.href.split("?")[1]
		}
	}
	,creatRedirectUrl	: function(){
		if(this.infoRedirect.svr.scheme=="http://" && this.infoRedirect.svr.portNum=="") this.infoRedirect.svr.portNum=":80";
		if(this.infoRedirect.svr.scheme=="https://" && this.infoRedirect.svr.portNum=="") this.infoRedirect.svr.portNum=":443";
		var redirectUrl	=	this.infoRedirect.svr.scheme + this.infoRedirect.svr.serverName + this.infoRedirect.svr.portNum + this.infoRedirect.svr.uriPath ;
		redirectUrl		=	redirectUrl+this.infoRedirect.svr.queryString;
		this.inspectionUrl(redirectUrl);
	}
	,inspectionUrl	:	function (redirectUrl){
		var	isSUrl		=	false;
		$.each(this.infoRedirect.sUrlList,function(){
			if(redirectUrl.indexOf(this)>-1){
				isSUrl	=	true;
				return false;
			}
		});
		var fromProtocol	=	"https://";
		var toProtocol		=	"http://";
		var fromPort		=	this.infoRedirect.port.ssl=="" ? ":443":this.infoRedirect.port.ssl;
		var toPort			=	this.infoRedirect.port.web=="" ? ":80":this.infoRedirect.port.web;
		if(isSUrl && redirectUrl.indexOf("localhost")==-1 && redirectUrl.indexOf("58.87.43.")==-1 && redirectUrl.indexOf("10.10.19.")==-1 && redirectUrl.indexOf("10.20.217.")==-1){
			fromProtocol	=	"http://";
			toProtocol		=	"https://";
			fromPort		=	this.infoRedirect.port.web=="" ? ":80":this.infoRedirect.port.web;
			toPort			=	this.infoRedirect.port.ssl=="" ? ":443":this.infoRedirect.port.ssl;
		}
		if(this.infoRedirect.svr.scheme!=toProtocol){
			this.sendRedirect(fromProtocol,toProtocol,fromPort,toPort,redirectUrl);
		}
	}
	,sendRedirect	:	function (fs,ts,fp,tp,redirectUrl){
        if(this.infoRedirect.svr.scheme==fs){
        	redirectUrl = redirectUrl.split(fs).join(ts);
        	
        	if(fp!=""){
        		redirectUrlArr = redirectUrl.split(fp);
        		redirectUrl	=	redirectUrlArr.join(tp);
        	}
        	redirectUrl=redirectUrl.split(":80").join("");
        	redirectUrl=redirectUrl.split(":443").join("");
			location.href=redirectUrl;
		}
	}
};

var sDirect	=	new SSLRedirect();

sDirect.infoRedirect.port.web	=	"";		
sDirect.infoRedirect.port.ssl	=	"";
if(location.href.indexOf("dev-www.kia")>-1){
	sDirect.infoRedirect.port.web	=	"";
	sDirect.infoRedirect.port.ssl	=	":1443";
}

sDirect.infoRedirect.sUrlList	=	[
	"/member/id"
	,"/member/login"
	,"/member/password"
	,"/member/register"
	,"/my/branch-counsel/branch-counsel-list"
	,"/my/default"
	,"/my/estimate/estimate-list"
	,"/my/like/like-list"
	,"/my/like/like-view"
	,"/my/member/member-info"
	,"/my/member/member-withdrawal"
	,"/my/online-counsel/online-counsel-list-nodata"
	,"/my/online-counsel/online-counsel-list"
	,"/my/online-counsel/online-counsel-view"
	,"/my/test-service/complete"
	,"/my/member/member-modify-check"
];

//sDirect.creatRedirectUrl();
var CSSrules = {
	'textarea' : function(element){
			element.onkeydown = function(event){
				return doKeyPress(element,event);
			}
			,
			element.onpaste = function(){
				return doPaste(element);
			}
			,
			element.onkeyup = function(){
				return doKeyUp(element);
			}
			,
			element.onblur = function(){
			   // return doKeyUp(element);
			}
	}
}

Behaviour.register(CSSrules);

var browser = getBrowserType();

// Keep user from entering more than maxLength characters
function doKeyPress(obj,evt){
	var maxLength = obj.getAttribute("maxlength");
	var e = window.event ? event.keyCode : evt.which;
	if ( (e == 32) || (e == 13) || (e > 47)) { //IE
		if(maxLength && (obj.value.length > maxLength-1)) {
			if (window.event) {
				window.event.returnValue = null;
			} else {
				evt.cancelDefault;
				return false;
			}
		}
	}
}
function doKeyUp(obj){
	var maxLength = obj.getAttribute("maxlength");
	var iCount = obj.value.length;
	
	//Chrome
	if("Chrome" == getBrowserType() ) {
		if(obj.value.match(/\n/g)) {
			iCount += obj.value.match(/\n/g).length;
		}
	}
	
	if(maxLength && iCount > maxLength){
		if("Chrome" == getBrowserType()) {
			if(obj.value.match(/\n/g)) {
				obj.value = obj.value.substr(0,maxLength - obj.value.match(/\n/g).length);
			} else {
				obj.value = obj.value.substr(0,maxLength);
			}
			
		} else {
			obj.value = obj.value.substr(0,maxLength);
		}
	}

	var sr = obj.getAttribute("showremain");
	if (sr) {
		document.getElementById(sr).innerHTML = maxLength-obj.value.length;
	}
	
	showCountUp(obj);
}

// Cancel default behavior and create a new paste routine
function doPaste(obj){
	var maxLength = obj.getAttribute("maxlength");
	if(maxLength){
		if ((window.event) && (browser.indexOf("IE") > -1)) { //IE

			var oTR;

			try {
				oTR = obj.document.selection.createRange();
			} catch(e) {
				//When access to selection range in iframe document
				if(parent.document.getElementById("frame1")) {
					oTR = parent.document.getElementById("frame1").contentWindow.document.selection.createRange();
				}
				
				//if(parent.document.getElementById("frame2")) {
				//	oTR = parent.document.getElementById("frame2").contentWindow.document.selection.createRange();
				//}
			}
			
			var oTRLength = 0;
			if(oTR) {
				oTRLength = oTR.text.length;
			}

			var iInsertLength = maxLength - obj.value.length + oTRLength;
			try {
				var sData = window.clipboardData.getData("Text").substr(0,iInsertLength);
					oTR.text = sData;
			} catch (err) {
			}

			if (window.event) { //IE
				window.event.returnValue = null;
			} else {
				//not IE
				obj.value = obj.value.substr(0,maxLength);
				return false;
			}
		} else if(browser == "Chrome") {
			
		}
	}
}

/*!
 * jQuery Validation Plugin v1.13.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2014 Jörn Zaefferer
 * Released under the MIT license
 */
(function( factory ) {
	if ( typeof define === "function" && define.amd ) {
		define( ["jquery"], factory );
	} else {
		factory( jQuery );
	}
}(function( $ ) {

$.extend($.fn, {
	// http://jqueryvalidation.org/validate/
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data( this[ 0 ], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[ 0 ] );
		$.data( this[ 0 ], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.validateDelegate( ":submit", "click", function( event ) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = event.target;
				}
				// allow suppressing validation by adding a cancel class to the submit button
				if ( $( event.target ).hasClass( "cancel" ) ) {
					validator.cancelSubmit = true;
				}

				// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $( event.target ).attr( "formnovalidate" ) !== undefined ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden;
					if ( validator.settings.submitHandler ) {
						if ( validator.submitButton ) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $( "<input type='hidden'/>" )
								.attr( "name", validator.submitButton.name )
								.val( $( validator.submitButton ).val() )
								.appendTo( validator.currentForm );
						}
						validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( validator.submitButton ) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator;

		if ( $( this[ 0 ] ).is( "form" ) ) {
			valid = this.validate().form();
		} else {
			valid = true;
			validator = $( this[ 0 ].form ).validate();
			this.each( function() {
				valid = validator.element( this ) && valid;
			});
		}
		return valid;
	},
	// attributes: space separated list of attributes to retrieve and remove
	removeAttrs: function( attributes ) {
		var result = {},
			$element = this;
		$.each( attributes.split( /\s/ ), function( index, value ) {
			result[ value ] = $element.attr( value );
			$element.removeAttr( value );
		});
		return result;
	},
	// http://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;

		if ( command ) {
			settings = $.data( element.form, "validator" ).settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules( element );
			switch ( command ) {
			case "add":
				$.extend( existingRules, $.validator.normalizeRule( argument ) );
				// remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if ( argument.messages ) {
					settings.messages[ element.name ] = $.extend( settings.messages[ element.name ], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered = {};
				$.each( argument.split( /\s/ ), function( index, method ) {
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
					if ( method === "required" ) {
						$( element ).removeAttr( "aria-required" );
					}
				});
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules( element ),
			$.validator.attributeRules( element ),
			$.validator.dataRules( element ),
			$.validator.staticRules( element )
		), element );

		// make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend( { required: param }, data );
			$( element ).attr( "aria-required", "true" );
		}

		// make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param });
		}

		return data;
	}
});

// Custom selectors
$.extend( $.expr[ ":" ], {
	// http://jqueryvalidation.org/blank-selector/
	blank: function( a ) {
		return !$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/filled-selector/
	filled: function( a ) {
		return !!$.trim( "" + $( a ).val() );
	},
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) {
		return !$( a ).prop( "checked" );
	}
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray( arguments );
			args.unshift( source );
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray( arguments ).slice( 1 );
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each( params, function( i, n ) {
		source = source.replace( new RegExp( "\\{" + i + "\\}", "g" ), function() {
			return n;
		});
	});
	return source;
};

$.extend( $.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $( [] ),
		errorLabelContainer: $( [] ),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.hideThese( this.errorsFor( element ) );
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable( element ) && ( element.name in this.submitted || !this.optional( element ) ) ) {
				this.element( element );
			}
		},
		onkeyup: function( element, event ) {
			if ( event.which === 9 && this.elementValue( element ) === "" ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastElement ) {
				this.element( element );
			}
		},
		onclick: function( element ) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element( element );

			// or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element( element.parentNode );
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).addClass( errorClass ).removeClass( validClass );
			} else {
				$( element ).addClass( errorClass ).removeClass( validClass );
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName( element.name ).removeClass( errorClass ).addClass( validClass );
			} else {
				$( element ).removeClass( errorClass ).addClass( validClass );
			}
		}
	},

	// http://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date ( ISO ).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format( "Please enter no more than {0} characters." ),
		minlength: $.validator.format( "Please enter at least {0} characters." ),
		rangelength: $.validator.format( "Please enter a value between {0} and {1} characters long." ),
		range: $.validator.format( "Please enter a value between {0} and {1}." ),
		max: $.validator.format( "Please enter a value less than or equal to {0}." ),
		min: $.validator.format( "Please enter a value greater than or equal to {0}." )
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $( this.settings.errorLabelContainer );
			this.errorContext = this.labelContainer.length && this.labelContainer || $( this.currentForm );
			this.containers = $( this.settings.errorContainer ).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = ( this.groups = {} ),
				rules;
			$.each( this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split( /\s/ );
				}
				$.each( value, function( index, name ) {
					groups[ name ] = key;
				});
			});
			rules = this.settings.rules;
			$.each( rules, function( key, value ) {
				rules[ key ] = $.validator.normalizeRule( value );
			});

			function delegate( event ) {
				var validator = $.data( this[ 0 ].form, "validator" ),
					eventType = "on" + event.type.replace( /^validate/, "" ),
					settings = validator.settings;
				if ( settings[ eventType ] && !this.is( settings.ignore ) ) {
					settings[ eventType ].call( validator, this[ 0 ], event );
				}
			}
			$( this.currentForm )
				.validateDelegate( ":text, [type='password'], [type='file'], select, textarea, " +
					"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
					"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], " +
					"[type='range'], [type='color'], [type='radio'], [type='checkbox']",
					"focusin focusout keyup", delegate)
				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.validateDelegate("select, option, [type='radio'], [type='checkbox']", "click", delegate);

			if ( this.settings.invalidHandler ) {
				$( this.currentForm ).bind( "invalid-form.validate", this.settings.invalidHandler );
			}

			// Add aria-required to any Static/Data/Class required fields before first validation
			// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
			$( this.currentForm ).find( "[required], [data-rule-required], .required" ).attr( "aria-required", "true" );
		},

		// http://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend( this.submitted, this.errorMap );
			this.invalid = $.extend({}, this.errorMap );
			if ( !this.valid() ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = ( this.currentElements = this.elements() ); elements[ i ]; i++ ) {
				this.check( elements[ i ] );
			}
			return this.valid();
		},

		// http://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				result = true;

			this.lastElement = checkElement;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				result = this.check( checkElement ) !== false;
				if ( result ) {
					delete this.invalid[ checkElement.name ];
				} else {
					this.invalid[ checkElement.name ] = true;
				}
			}
			// Add aria-invalid status for screen readers
			$( element ).attr( "aria-invalid", !result );

			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[ name ],
						element: this.findByName( name )[ 0 ]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !( element.name in errors );
				});
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$( this.currentForm ).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements()
					.removeClass( this.settings.errorClass )
					.removeData( "previousValue" )
					.removeAttr( "aria-invalid" );
		},

		numberOfInvalids: function() {
			return this.objectLength( this.invalid );
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.hideThese( this.toHide );
		},

		hideThese: function( errors ) {
			errors.not( this.containers ).text( "" );
			this.addWrapper( errors ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$( this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])
					.filter( ":visible" )
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger( "focusin" );
				} catch ( e ) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep( this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $( this.currentForm )
			.find( "input, select, textarea" )
			.not( ":submit, :reset, :image, [disabled]" )
			.not( this.settings.ignore )
			.filter( function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this );
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength( $( this ).rules() ) ) {
					return false;
				}

				rulesCache[ this.name ] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $( selector )[ 0 ];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split( " " ).join( "." );
			return $( this.settings.errorElement + "." + errorClass, this.errorContext );
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $( [] );
			this.toHide = $( [] );
			this.currentElements = $( [] );
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor( element );
		},

		elementValue: function( element ) {
			var val,
				$element = $( element ),
				type = element.type;

			if ( type === "radio" || type === "checkbox" ) {
				return $( "input[name='" + element.name + "']:checked" ).val();
			} else if ( type === "number" && typeof element.validity !== "undefined" ) {
				return element.validity.badInput ? false : $element.val();
			}

			val = $element.val();
			if ( typeof val === "string" ) {
				return val.replace(/\r/g, "" );
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $( element ).rules(),
				rulesCount = $.map( rules, function( n, i ) {
					return i;
				}).length,
				dependencyMismatch = false,
				val = this.elementValue( element ),
				result, method, rule;

			for ( method in rules ) {
				rule = { method: method, parameters: rules[ method ] };
				try {

					result = $.validator.methods[ method ].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor( element ) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch ( e ) {
					if ( this.settings.debug && window.console ) {
						//console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength( rules ) ) {
				this.successList.push( element );
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method.charAt( 0 ).toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data( "msg" );
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[ name ];
			return m && ( m.constructor === String ? m : m[ method ]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for ( var i = 0; i < arguments.length; i++) {
				if ( arguments[ i ] !== undefined ) {
					return arguments[ i ];
				}
			}
			return undefined;
		},

		defaultMessage: function( element, method ) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[ method ],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call( this, rule.parameters, element );
			} else if ( theregex.test( message ) ) {
				message = $.validator.format( message.replace( theregex, "{$1}" ), rule.parameters );
			}
			this.errorList.push({
				message: message,
				element: element,
				method: rule.method
			});

			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[ i ]; i++ ) {
				error = this.errorList[ i ];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[ i ]; i++ ) {
					this.showLabel( this.successList[ i ] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[ i ]; i++ ) {
					this.settings.unhighlight.call( this, elements[ i ], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not( this.invalidElements() );
		},

		invalidElements: function() {
			return $( this.errorList ).map(function() {
				return this.element;
			});
		},

		showLabel: function( element, message ) {
			var place, group, errorID,
				error = this.errorsFor( element ),
				elementID = this.idOrName( element ),
				describedBy = $( element ).attr( "aria-describedby" );
			if ( error.length ) {
				// refresh error/success class
				error.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
				// replace message on existing label
				error.html( message );
			} else {
				// create error element
				error = $( "<" + this.settings.errorElement + ">" )
					.attr( "id", elementID + "-error" )
					.addClass( this.settings.errorClass )
					.html( message || "" );

				// Maintain reference to the element to be placed into the DOM
				place = error;
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap( "<" + this.settings.wrapper + "/>" ).parent();
				}
				if ( this.labelContainer.length ) {
					this.labelContainer.append( place );
				} else if ( this.settings.errorPlacement ) {
					this.settings.errorPlacement( place, $( element ) );
				} else {
					place.insertAfter( element );
				}

				// Link error back to the element
				if ( error.is( "label" ) ) {
					// If the error is a label, then associate using 'for'
					error.attr( "for", elementID );
				} else if ( error.parents( "label[for='" + elementID + "']" ).length === 0 ) {
					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby

					errorID = error.attr( "id" );
					// Respect existing non-error aria-describedby
					if ( !describedBy ) {
						describedBy = errorID;
					} else if ( !describedBy.match( new RegExp( "\b" + errorID + "\b" ) ) ) {
						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$( element ).attr( "aria-describedby", describedBy );

					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if ( group ) {
						$.each( this.groups, function( name, testgroup ) {
							if ( testgroup === group ) {
								$( "[name='" + name + "']", this.currentForm )
									.attr( "aria-describedby", error.attr( "id" ) );
							}
						});
					}
				}
			}
			if ( !message && this.settings.success ) {
				error.text( "" );
				if ( typeof this.settings.success === "string" ) {
					error.addClass( this.settings.success );
				} else {
					this.settings.success( error, element );
				}
			}
			this.toShow = this.toShow.add( error );
		},

		errorsFor: function( element ) {
			var name = this.idOrName( element ),
				describer = $( element ).attr( "aria-describedby" ),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";
			// aria-describedby should directly reference the error element
			if ( describer ) {
				selector = selector + ", #" + describer.replace( /\s+/g, ", #" );
			}
			return this
				.errors()
				.filter( selector );
		},

		idOrName: function( element ) {
			return this.groups[ element.name ] || ( this.checkable( element ) ? element.name : element.id || element.name );
		},

		validationTargetFor: function( element ) {
			// if radio/checkbox, validate first element in group instead
			if ( this.checkable( element ) ) {
				element = this.findByName( element.name ).not( this.settings.ignore )[ 0 ];
			}
			return element;
		},

		checkable: function( element ) {
			return ( /radio|checkbox/i ).test( element.type );
		},

		findByName: function( name ) {
			return $( this.currentForm ).find( "[name='" + name + "']" );
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $( "option:selected", element ).length;
			case "input":
				if ( this.checkable( element ) ) {
					return this.findByName( element.name ).filter( ":checked" ).length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param]( param, element ) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$( param, element.form ).length;
			},
			"function": function( param, element ) {
				return param( element );
			}
		},

		optional: function( element ) {
			var val = this.elementValue( element );
			return !$.validator.methods.required.call( this, val, element ) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[ element.name ] ) {
				this.pendingRequest++;
				this.pending[ element.name ] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$( this.currentForm ).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest === 0 && this.formSubmitted ) {
				$( this.currentForm ).triggerHandler( "invalid-form", [ this ]);
				this.formSubmitted = false;
			}
		},

		previousValue: function( element ) {
			return $.data( element, "previousValue" ) || $.data( element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[ className ] = rules;
		} else {
			$.extend( this.classRuleSettings, className );
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $( element ).attr( "class" );

		if ( classes ) {
			$.each( classes.split( " " ), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend( rules, $.validator.classRuleSettings[ this ]);
				}
			});
		}
		return rules;
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $( element ),
			type = element.getAttribute( "type" ),
			method, value;

		for ( method in $.validator.methods ) {

			// support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute( method );
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}
				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr( method );
			}

			// convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
				value = Number( value );
			}

			if ( value || value === 0 ) {
				rules[ method ] = value;
			} else if ( type === method && type !== "range" ) {
				// exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[ method ] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test( rules.maxlength ) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var method, value,
			rules = {}, $element = $( element );
		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method.charAt( 0 ).toUpperCase() + method.substring( 1 ).toLowerCase() );
			if ( value !== undefined ) {
				rules[ method ] = value;
			}
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data( element.form, "validator" );

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule( validator.settings.rules[ element.name ] ) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {
		// handle dependency check
		$.each( rules, function( prop, val ) {
			// ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[ prop ];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch ( typeof val.depends ) {
				case "string":
					keepRule = !!$( val.depends, element.form ).length;
					break;
				case "function":
					keepRule = val.depends.call( element, element );
					break;
				}
				if ( keepRule ) {
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[ prop ];
				}
			}
		});

		// evaluate parameters
		$.each( rules, function( rule, parameter ) {
			rules[ rule ] = $.isFunction( parameter ) ? parameter( element ) : parameter;
		});

		// clean number parameters
		$.each([ "minlength", "maxlength" ], function() {
			if ( rules[ this ] ) {
				rules[ this ] = Number( rules[ this ] );
			}
		});
		$.each([ "rangelength", "range" ], function() {
			var parts;
			if ( rules[ this ] ) {
				if ( $.isArray( rules[ this ] ) ) {
					rules[ this ] = [ Number( rules[ this ][ 0 ]), Number( rules[ this ][ 1 ] ) ];
				} else if ( typeof rules[ this ] === "string" ) {
					parts = rules[ this ].replace(/[\[\]]/g, "" ).split( /[\s,]+/ );
					rules[ this ] = [ Number( parts[ 0 ]), Number( parts[ 1 ] ) ];
				}
			}
		});

		if ( $.validator.autoCreateRanges ) {
			// auto-create ranges
			if ( rules.min && rules.max ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength && rules.maxlength ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each( data.split( /\s/ ), function() {
				transformed[ this ] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if ( method.length < 3 ) {
			$.validator.addClassRules( name, $.validator.normalizeRule( name ) );
		}
	},

	methods: {

		// http://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {
			// check if dependency is met
			if ( !this.depend( param, element ) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way
				var val = $( element ).val();
				return val && val.length > 0;
			}
			if ( this.checkable( element ) ) {
				return this.getLength( value, element ) > 0;
			}
			return $.trim( value ).length > 0;
		},

		// http://jqueryvalidation.org/email-method/
		email: function( value, element ) {
			// From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional( element ) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test( value );
		},

		// http://jqueryvalidation.org/url-method/
		url: function( value, element ) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional( element ) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test( value );
		},

		// http://jqueryvalidation.org/date-method/
		date: function( value, element ) {
			return this.optional( element ) || !/Invalid|NaN/.test( new Date( value ).toString() );
		},

		// http://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional( element ) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test( value );
		},

		// http://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional( element ) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test( value );
		},

		// http://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional( element ) || /^\d+$/.test( value );
		},

		// http://jqueryvalidation.org/creditcard-method/
		// based on http://en.wikipedia.org/wiki/Luhn/
		creditcard: function( value, element ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if ( /[^0-9 \-]+/.test( value ) ) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false,
				n, cDigit;

			value = value.replace( /\D/g, "" );

			// Basing min and max length on
			// http://developer.ean.com/general_info/Valid_Credit_Card_Types
			if ( value.length < 13 || value.length > 19 ) {
				return false;
			}

			for ( n = value.length - 1; n >= 0; n--) {
				cDigit = value.charAt( n );
				nDigit = parseInt( cDigit, 10 );
				if ( bEven ) {
					if ( ( nDigit *= 2 ) > 9 ) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return ( nCheck % 10 ) === 0;
		},

		// http://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
			return this.optional( element ) || length >= param;
		},

		// http://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
			return this.optional( element ) || length <= param;
		},

		// http://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength( $.trim( value ), element );
			return this.optional( element ) || ( length >= param[ 0 ] && length <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional( element ) || value >= param;
		},

		// http://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional( element ) || value <= param;
		},

		// http://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional( element ) || ( value >= param[ 0 ] && value <= param[ 1 ] );
		},

		// http://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $( param );
			if ( this.settings.onfocusout ) {
				target.unbind( ".validate-equalTo" ).bind( "blur.validate-equalTo", function() {
					$( element ).valid();
				});
			}
			return value === target.val();
		},

		// http://jqueryvalidation.org/remote-method/
		remote: function( value, element, param ) {
			if ( this.optional( element ) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue( element ),
				validator, data;

			if (!this.settings.messages[ element.name ] ) {
				this.settings.messages[ element.name ] = {};
			}
			previous.originalMessage = this.settings.messages[ element.name ].remote;
			this.settings.messages[ element.name ].remote = previous.message;

			param = typeof param === "string" && { url: param } || param;

			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			validator = this;
			this.startRequest( element );
			data = {};
			data[ element.name ] = value;
			$.ajax( $.extend( true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function( response ) {
					var valid = response === true || response === "true",
						errors, message, submitted;

					validator.settings.messages[ element.name ].remote = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.prepareElement( element );
						validator.formSubmitted = submitted;
						validator.successList.push( element );
						delete validator.invalid[ element.name ];
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, "remote" );
						errors[ element.name ] = previous.message = $.isFunction( message ) ? message( value ) : message;
						validator.invalid[ element.name ] = true;
						validator.showErrors( errors );
					}
					previous.valid = valid;
					validator.stopRequest( element, valid );
				}
			}, param ) );
			return "pending";
		}

	}

});

$.format = function deprecated() {
	throw "$.format has been deprecated. Please use $.validator.format instead.";
};

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

var pendingRequests = {},
	ajax;
// Use a prefilter if available (1.5+)
if ( $.ajaxPrefilter ) {
	$.ajaxPrefilter(function( settings, _, xhr ) {
		var port = settings.port;
		if ( settings.mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = xhr;
		}
	});
} else {
	// Proxy ajax
	ajax = $.ajax;
	$.ajax = function( settings ) {
		var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
			port = ( "port" in settings ? settings : $.ajaxSettings ).port;
		if ( mode === "abort" ) {
			if ( pendingRequests[port] ) {
				pendingRequests[port].abort();
			}
			pendingRequests[port] = ajax.apply(this, arguments);
			return pendingRequests[port];
		}
		return ajax.apply(this, arguments);
	};
}

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target

$.extend($.fn, {
	validateDelegate: function( delegate, type, handler ) {
		return this.bind(type, function( event ) {
			var target = $(event.target);
			if ( target.is(delegate) ) {
				return handler.apply(target, arguments);
			}
		});
	}
});

}));
/*
	@filename	: validation.add.js
    @filedesc	: jquery validation 확장
	@date		: 2014.10.08
	@author		: Jinwoo.Yuk
*/


//에러 메세지를 alert()으로 띄운다
$.validator.setDefaults({
	ignore: [],
    onkeyup:false,
    onclick:false,
    onfocusout:false,
    showErrors:function(errorMap, errorList){
        if(this.numberOfInvalids()) {
            alert(errorList[0].message);
        }
    }
});

//영문만
$.validator.addMethod("isalpha", function(v, e) {
    return this.optional(e) || /^[A-Za-z]*$/g.test(v);
});    

//숫자만
$.validator.addMethod("isnumeric", function(v, e) { 
    return this.optional(e) || /^[0-9]*$/g.test(v);
});     

//한글만
$.validator.addMethod("iskorean", function(v, e) { 
    return this.optional(e) || /^[ㄱ-ㅎ|가-힣]*$/g.test(v);
});

//특수문자만
$.validator.addMethod("isspecial", function(v, e) {
    return this.optional(e) || /^[\~\!\@\#\$\%\^\&\*\(\)\_\+\=\-\`\{\}\[\]\|\\\:\"\;\'\<\>\?\,\.\/]*$/g.test(v);
});    

//영문+숫자
$.validator.addMethod("isalphanumeric", function(v, e) { 
    return this.optional(e) || (/[A-Za-z]/g.test(v) && /[0-9]/g.test(v) && !/[\~\!\@\#\$\%\^\&\*\(\)\_\+\=\-\`\{\}\[\]\|\\\:\"\;\'\<\>\?\,\.\/]/g.test(v) && !/[ㄱ-ㅎ|가-힣]/g.test(v));
});    

//영문+숫자+특수문자
$.validator.addMethod("isalphanumericspecial", function(v, e) { 
    return this.optional(e) || /^[A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)\_\+\=\-\`\{\}\[\]\|\\\:\"\;\'\<\>\?\,\.\/]*$/g.test(v);
}); 

//영문+숫자+특수문자2(특수문자 일부)
$.validator.addMethod("isalphanumericspecial2", function(v, e) {
	return this.optional(e) || (/[A-Za-z]/g.test(v) && /[0-9]/g.test(v) && /[\~\!\@\#\$\%\^\&\*\(\)\_\+\=\-\`\{\}\[\]\|\\\:\"\;\'\<\>\?\,\.\/]/g.test(v) && !/[ㄱ-ㅎ|가-힣]/g.test(v));
	//return this.optional(e) || (/[A-Za-z]/g.test(v) && /[0-9]/g.test(v) && /[\!\$\*\,\?\@\[\]\^\`\{\}\~]/g.test(v) && !/[ㄱ-ㅎ|가-힣]/g.test(v));
    //return this.optional(e) || /^[A-Za-z0-9\!\@\#\$\%\^\&\*\?\_\~/]*$/g.test(v);
});

//차량번호
$.validator.addMethod("iskoreannumeric", function(v, e) { 
    return this.optional(e) || (!/[A-Za-z]/g.test(v) && /[0-9]/g.test(v) && !/[\~\!\@\#\$\%\^\&\*\(\)\_\+\=\-\`\{\}\[\]\|\\\:\"\;\'\<\>\?\,\.\/]/g.test(v) && /[가-힣]/g.test(v));
}); 

//이메일 아이디
$.validator.addMethod("isemailid", function(v, e) { 
    return this.optional(e) || /^[-A-Za-z0-9_]+[-A-Za-z0-9_.]*$/g.test(v);
});  

//이메일 도메인
$.validator.addMethod("isemaildomain", function(v, e) { 
    return this.optional(e) || /^[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[.]{1}[A-Za-z]{2,5}$/g.test(v);
});

//이메일 
$.validator.addMethod("isemail", function(v, e) { 
    return this.optional(e) || /^[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[@]{1}[-A-Za-z0-9_]+[-A-Za-z0-9_.]*[.]{1}[A-Za-z]{2,5}$/g.test(v);
});  

//GIS
$.validator.addMethod("isgis", function(v, e) { 
    return this.optional(e) || /^\d+\.\d+$/g.test(v);
});

//url (include protocol)
$.validator.addMethod("ishttpurl", function(v, e) { 
    return this.optional(e) || /((http|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\wㄱ-ㅎㅏ-ㅣ가-힣\;\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?)/g.test(v);
});

//url (not include protocol)
$.validator.addMethod("isurl", function(v, e) { 
    return this.optional(e) || /([\w\-_]+(\.[\w\-_]+)+([\wㄱ-ㅎㅏ-ㅣ가-힣\;\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?)/g.test(v);
});
    
//Not Equals    
$.validator.addMethod("notEqualTo", function(v, e, p) {
	return this.optional(e) || v != $(p).val();
});     
